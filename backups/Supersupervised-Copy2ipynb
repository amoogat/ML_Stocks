{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing variables\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import pandas_datareader as pdr\n",
    "import matplotlib.dates as mpl_dates\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>tickers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ACT Symbol,Company Name</td>\n",
       "      <td>ACT Symbol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A,\"Agilent Technologies, Inc. Common Stock\"</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AA,Alcoa Inc. Common Stock</td>\n",
       "      <td>AA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AA$B,Alcoa Inc. Depository Shares Representing...</td>\n",
       "      <td>AA$B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AAC,\"AAC Holdings, Inc. Common Stock\"</td>\n",
       "      <td>AAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3294</th>\n",
       "      <td>ZPIN,\"Zhaopin Limited American Depositary Shar...</td>\n",
       "      <td>ZPIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3295</th>\n",
       "      <td>ZQK,\"Quiksilver, Inc. Common Stock\"</td>\n",
       "      <td>ZQK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3296</th>\n",
       "      <td>ZTR,\"Zweig Total Return Fund, Inc. (The) Commo...</td>\n",
       "      <td>ZTR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3297</th>\n",
       "      <td>ZTS,Zoetis Inc. Class A Common Stock</td>\n",
       "      <td>ZTS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3298</th>\n",
       "      <td>ZX,\"China Zenix Auto International Limited Ame...</td>\n",
       "      <td>ZX</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3299 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 ticker     tickers\n",
       "0                               ACT Symbol,Company Name  ACT Symbol\n",
       "1           A,\"Agilent Technologies, Inc. Common Stock\"           A\n",
       "2                            AA,Alcoa Inc. Common Stock          AA\n",
       "3     AA$B,Alcoa Inc. Depository Shares Representing...        AA$B\n",
       "4                 AAC,\"AAC Holdings, Inc. Common Stock\"         AAC\n",
       "...                                                 ...         ...\n",
       "3294  ZPIN,\"Zhaopin Limited American Depositary Shar...        ZPIN\n",
       "3295                ZQK,\"Quiksilver, Inc. Common Stock\"         ZQK\n",
       "3296  ZTR,\"Zweig Total Return Fund, Inc. (The) Commo...         ZTR\n",
       "3297               ZTS,Zoetis Inc. Class A Common Stock         ZTS\n",
       "3298  ZX,\"China Zenix Auto International Limited Ame...          ZX\n",
       "\n",
       "[3299 rows x 2 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from collections import namedtuple\n",
    "\n",
    "\n",
    "tickers = []\n",
    "\n",
    "with open( r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\tickers.txt') as f: \n",
    "    \n",
    "    for line in f:\n",
    "        l = line.rstrip('\\n') \n",
    "        tickers.append(l)\n",
    "        \n",
    "            \n",
    "df = pd.DataFrame({'ticker': tickers})\n",
    "df['tickers'] = df['ticker'].str.split(',').str[0]\n",
    "\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ticker_list = df['tickers'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BBBY is a ticker\n",
      "BBBY is a ticker\n",
      "INTC is a ticker\n",
      "INTC is a ticker\n",
      "GGB is a ticker\n",
      "GGB is a ticker\n",
      "WMT is a ticker\n",
      "WMT is a ticker\n",
      "IGT is a ticker\n",
      "IGT is a ticker\n",
      "WKHS is a ticker\n",
      "WKHS is a ticker\n",
      "GOGO is a ticker\n",
      "GOGO is a ticker\n",
      "NEE is a ticker\n",
      "NEE is a ticker\n",
      "FTEK is a ticker\n",
      "FTEK is a ticker\n",
      "WATT is a ticker\n",
      "WATT is a ticker\n",
      "VERU is a ticker\n",
      "VERU is a ticker\n",
      "TGT is a ticker\n",
      "TGT is a ticker\n",
      "KR is a ticker\n",
      "KR is a ticker\n",
      "UMC is a ticker\n",
      "UMC is a ticker\n",
      "FAST is a ticker\n",
      "FAST is a ticker\n",
      "MAC is a ticker\n",
      "MAC is a ticker\n",
      "JD is a ticker\n",
      "JD is a ticker\n",
      "SPWR is a ticker\n",
      "SPWR is a ticker\n",
      "F is a ticker\n",
      "F is a ticker\n",
      "XL is a ticker\n",
      "XL is a ticker\n",
      "FUBO is a ticker\n",
      "FUBO is a ticker\n",
      "AMC is a ticker\n",
      "AMC is a ticker\n",
      "XSPA is a ticker\n",
      "XSPA is a ticker\n",
      "ATVI. is a ticker\n"
     ]
    }
   ],
   "source": [
    "lower = [x.lower() for x in ticker_list]\n",
    "import pandas as pd\n",
    "import re\n",
    "from collections import namedtuple\n",
    "\n",
    "good=[]\n",
    "bad = []\n",
    "file = open(r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\a.txt', encoding=\"utf8\")\n",
    "\n",
    "for line in file:\n",
    "    l = line.rstrip('\\n') \n",
    "    ticker = l.split(' ', 1)[0]\n",
    "\n",
    "    if (ticker in ticker_list or ticker in lower or re.match( r'\\b[A-Z]{3}\\b', ticker) or re.match( r'\\b[A-Z]{2}\\b', ticker) \n",
    "                            or re.match( r'\\b[A-Z]{4}\\b', ticker) or re.match( r'\\b[A-Z]{5}\\b', ticker)):\n",
    "\n",
    "        print (ticker + ' is a ticker')\n",
    "        good.append(l)\n",
    "\n",
    "    else:       \n",
    "        bad.append(l)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "52Week High\n",
      "\n",
      "26.16\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "17.48\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "14.80\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "12.11\n",
      "\n",
      "52Week Low\n",
      "\n",
      "3.43\n",
      "\n",
      "\n",
      "\n",
      "01/05/2021\n",
      "\n",
      "BBBY My main watch this one could squeeze nicely as you look at the chart with er as the fundamental driver.  This can breakout in either direction and create a massive gainer. Two things you can do is wait a day before er and play that or wait afterwards. Looking for a straddle/strangle play here. High short float and the contraction in the bollinger signaling a big move.\n",
      "\n",
      "!cd intc\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "69.29\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "56.45\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "53.42\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "49.48\n",
      "\n",
      "52Week Low\n",
      "\n",
      "43.61\n",
      "\n",
      "\n",
      "\n",
      "01/05/2021\n",
      "\n",
      "INTC if this can bounce of the 4949.30s an break past 50 I can see this breaking the downtrend, I would take a swing on this if 49.30 holds well and it breaks above 50 and does not fall back below that. Could be a sign for an uptrend. Just be aware if it. Breaks down 49 and not retrace above which could signal the breakout is still consolidating or a bearish trend back down. Sympathy play off amd and mu.\n",
      "\n",
      "01/06/2021\n",
      "\n",
      "01/06/2020\n",
      "\n",
      "!cd ggb\n",
      "\n",
      "52Week High\n",
      "\n",
      "5.34\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "3.93\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "3.50\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "3.06\n",
      "\n",
      "52Week Low\n",
      "\n",
      "1.65\n",
      "\n",
      "\n",
      "\n",
      "01/06/2021\n",
      "\n",
      "GGB a cheap play that could explode if It breaks up further. If you are going to play this for low risk I would do in the money with the low theta burn and decent delta for the cost. If this hits $5 bounces off the upper trend line as support I can see this trending higher as precious mental goes up. I analyzed several companies and this one  hasn’t entirely broke out yet. This is a swing in the money if it bounces off the dip. Be careful of the 4.80 retracement  and 4.70 is vwap support.\n",
      "\n",
      "!cd wmt\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "153.66\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "133.93\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "127.83\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "121.73\n",
      "\n",
      "52Week Low\n",
      "\n",
      "102.00\n",
      "\n",
      "\n",
      "\n",
      "01/06/2021\n",
      "\n",
      "WMT (watch at the open)  looking for Walmart for a potential day trade or possible swing to the next 12 weeks. Seems to be testing the tom trend line and the triangle is getting tighter for a possible reversal. If this does dip due to market conditions I would watch that 145145.25 bounce if it dipped and maybe try for that reversal. However, Keep in mind this could still touch the tom of the trend again and retest the 144.50s for the low of the day. I would bearish if this closes below 144. Breakout past 146.35 can see a test to the 148s in the next day or weeks.\n",
      "\n",
      "!cd igt\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "17.14\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "11.96\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "10.36\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "8.77\n",
      "\n",
      "52Week Low\n",
      "\n",
      "3.59\n",
      "\n",
      "\n",
      "\n",
      "01/06/2021\n",
      "\n",
      "IGT  looking for that retracement on the dip to about 1616.34 level and then see a possible test of the upper bollinger short term target 1717.50. If this somehow breakouts the upper channel this could see $20. However, It must break 17 and possibly close above there. If this falls below 16. Keep in mind that the pattern could 15.30s on the primary trend line if the breakout fails. Main objective a close above 17 but  consolidation levels near 16.30s.\n",
      "\n",
      "01/07/2021\n",
      "\n",
      "01/07/2021\n",
      "\n",
      "!cd wkhs\n",
      "\n",
      "52Week High\n",
      "\n",
      "30.99\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "19.65\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "16.15\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "12.65\n",
      "\n",
      "52Week Low\n",
      "\n",
      "1.32\n",
      "\n",
      "\n",
      "\n",
      "01/07/2021\n",
      "\n",
      "WKHS I would like to see this pull back from the 23.5023.80s to have an entry on calls. At least 1 month out for the possible reversal from the down trend. Once this breaks 25 and close above that level then it can possibly test. A u shape recover. A drop below 23 is bearish to me and you should set up a stop if it doesn’t recover from that 23 level buy for the swing or day trade. Currently in a bullish reversal.\n",
      "\n",
      "!cd gogo\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "12.88\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "8.47\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "7.11\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "5.74\n",
      "\n",
      "52Week Low\n",
      "\n",
      "1.33\n",
      "\n",
      "\n",
      "\n",
      "01/07/2021\n",
      "\n",
      "GOGO shares or options. Look for a bullish reversal with the two green candles it posted on the down trend. Looking for a u shape  bounce to touch the 10.68 level a possible touch to the bollinger of 11.32. For the dips I would take anywhere from the previous opening to the mid level. 10.3010.50 dip is a medium risk entry but the ideal entry would be low 10s. Just watch the entry and this is a swing at least 1 month out. The 01/15 swing is a bit risky so in the money #10 calls is better.\n",
      "\n",
      "!cd nee\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "83.34\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "68.20\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "63.52\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "58.84\n",
      "\n",
      "52Week Low\n",
      "\n",
      "43.70\n",
      "\n",
      "\n",
      "\n",
      "01/07/2021\n",
      "\n",
      "NEE Could be the next rapper play. Watch this closely and most likely a day trade or you can do a debit spread. The sector is seeing a momentum of a run. If this somehow dips it can drop to the 7878.5 range which is a possible bounce play from the bollinger and green stick candle. If the 78 dollar some how breaks the it can test the Lowe part of the 7777.14 so just be careful. A break above 80 can possibly test new highs. Depending on your entrance can be a swing for a 8285 $ target.\n",
      "\n",
      "01/11/2021\n",
      "\n",
      "1/11/2021\n",
      "\n",
      "!cd ftek\n",
      "\n",
      "52Week High\n",
      "\n",
      "7.04\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "4.47\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "3.67\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "2.87\n",
      "\n",
      "52Week Low\n",
      "\n",
      "0.30\n",
      "\n",
      "\n",
      "\n",
      "01/11/2021\n",
      "\n",
      "FTEK Looking for a dip around the 5.05.30s and looking for a march call at $5. Looking to see this create a U shape breakout from the cup and handle formed. MACD crossing up on all levels as well. Im liking this for a potential $6.50+ target if $6 breaks. The market conditions can affect the overall performance possibly. However, consolidation above $5 is a good swing candidate.\n",
      "\n",
      "!cd watt\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "4.58\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "2.60\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "2.53\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "2.13\n",
      "\n",
      "52Week Low\n",
      "\n",
      "0.61\n",
      "\n",
      "\n",
      "\n",
      "01/11/2021\n",
      "\n",
      "WATT nice cup and handle potentially forming. If this hits 2.30s again on the dip potential high risk reward play for the bounce into a new breakout. Fundamentally there is a lot of news about the company.  Looking for 2 dollars calls in the money either for February or may. Price target 3+ mid term swing and maybe an in the money weekly as well . Contracting nicely and looking to breakout soon.\n",
      "\n",
      "!cd veru\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "11.45\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "7.95\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "6.88\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "5.80\n",
      "\n",
      "52Week Low\n",
      "\n",
      "2.30\n",
      "\n",
      "\n",
      "\n",
      "01/11/2021\n",
      "\n",
      "VERU interesting pattern and gapped up a lot. Looking for a test of the 8.809.20 range on the dip possibly and maybe a reversal to new highs within a few weeks. Fundamentally it is good and chart set up isn’t bfor a breakout to 10+ . In addition, broke out of the downtrend for a reversal. Will look for an opportunity for this in the money 7.50 calls on the dip or $10 for  February or later.\n",
      "\n",
      "!cd tgt\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "193.88\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "154.26\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "142.02\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "129.79\n",
      "\n",
      "52Week Low\n",
      "\n",
      "90.17\n",
      "\n",
      "\n",
      "\n",
      "01/11/2021\n",
      "\n",
      "TGT looking for that dip around 188.6  189.12 possibly for a potential reversal swing play. Looking for this breakout soon with the given pattern and trading in a certain range. Looking to swing to that $200 price target in one to two month. I would take further out calls just incase the market conditions  goes against this set up. If you can get the dip and hopefully  reverses to 190 and testing new high. However, if it opens up above 190 for say 191+ then I would watch that 190/191 for a bounce if it dips.  Might be a weekly spreplay. Experience traders only.\n",
      "\n",
      "01/12/2021\n",
      "\n",
      "1/12/2021 midterm swings ( i dont expect anything big from these today)\n",
      "\n",
      "!cd kr\n",
      "\n",
      "52Week High\n",
      "\n",
      "31.12\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "37.22\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "33.21\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "31.97\n",
      "\n",
      "52Week Low\n",
      "\n",
      "31.87\n",
      "\n",
      "\n",
      "\n",
      "01/12/2021\n",
      "\n",
      "KR Im liking the chart pattern as Kroger has broken the downtrend and trying to reverse. A break past 32.50 can see a nice breakout from here. Im thinking about getting April . Looking to take this for the dip at 31.70s maybe 31.80 but this is a long term hold. Looking for that small percentage gain of 3050 percent. Watch below 31.\n",
      "\n",
      "!cd umc\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "8.30\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "9.40\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "8.91\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "6.61\n",
      "\n",
      "52Week Low\n",
      "\n",
      "5.75\n",
      "\n",
      "\n",
      "\n",
      "01/12/2021\n",
      "\n",
      "UMC  Im liking this for a long term hold in shares but will look into options as well. Very undervalued semiconductor play and I do see the chart pattern curling up nicely as well.. Looking for that 8.758.80s dip for a potential swing on the April 10 dollar calls.\n",
      "\n",
      "!cd fast\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "49.55\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "50.91\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "50.48\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "41.67\n",
      "\n",
      "52Week Low\n",
      "\n",
      "38.81\n",
      "\n",
      "\n",
      "\n",
      "01/12/2021\n",
      "\n",
      "FAST  Has been trading above that $50 psychological support which took weeks to break. Im liking February calls as this could breakout if this is above $51 and test that $55 gap over time. Potentially taking February $52.1 calls. This has some theta burn so I would monitor this carefully and get out when you are up. Stop loss around 20 percent. Upside from this I would 30100 percent if it begins to break $51. I might take this around the dip 50.2050.30\n",
      "\n",
      "01/13/2021\n",
      "\n",
      "01/13/2020\n",
      "\n",
      "!cd mac\n",
      "\n",
      "52Week High\n",
      "\n",
      "10.96\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "24.92\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "17.13\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "14.73\n",
      "\n",
      "52Week Low\n",
      "\n",
      "12.32\n",
      "\n",
      "\n",
      "\n",
      "01/13/2021\n",
      "\n",
      "MAC Looking to have a golden cross on the daily and I am looking for that dip around 11.6011.68 to see a reversal break to new highs if it opens below 12. High percentage float and near a breakout for a short squeeze. It broke out the temporary down trend and has a gap to fill. Could see go to 12.3312.80 $ near term Has to break this wedge to see that new $13 resistance. Downside must if it breaks below 11.60s and close at the 11.40s. I wouldnt like to see that. However, a risk reward play and loking for February $12 calls possibly or march. Could buy shares with little downside here\n",
      "\n",
      "!cd jd\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "84.96\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "96.20\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "88.86\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "71.94\n",
      "\n",
      "52Week Low\n",
      "\n",
      "64.45\n",
      "\n",
      "\n",
      "\n",
      "01/13/2021\n",
      "\n",
      "JD  potential day trade and maybe a swing for the next week. A break past 90.80 and then a break past 91.45 can push this to the 9394 range. If I would see if this dips to the 8888.30s for a bounce past 90+ . I would watch this carefully and swing in the money or maybe out of the money 90 calls for a quick play. However, below 88 could be bearish it touches 87.0087.23.  High risk/ reward play. Trade carefully or play for the swing or two weeks out.\n",
      "\n",
      "!cd spwr\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "26.97\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "32.86\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "30.15\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "21.85\n",
      "\n",
      "52Week Low\n",
      "\n",
      "18.44\n",
      "\n",
      "\n",
      "\n",
      "01/13/2021\n",
      "\n",
      "SPWR  cup and handle play for a potential dip and rip pattern for the next week. Look for that 29.70 support if can bounce from there I see a strong pattern forming if it can breakout from this level. The another possibility it drops below 29.70 into 29 dollars try to bounce and run from there. The max down side is 28.20s on the tom handle. However, a bounce at the 29s to 30+ can indicate a move to 35 + on the swing. . If it bounces off 30 which is possible then you can play on that level but the support seems relatively week so monitor that. Huge short float on this if it squeezes out the handle.\n",
      "\n",
      "01/14/2021\n",
      "\n",
      "01/14/2021\n",
      "\n",
      "!cd f\n",
      "\n",
      "52Week High\n",
      "\n",
      "9.36\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "9.92\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "9.79\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "7.64\n",
      "\n",
      "52Week Low\n",
      "\n",
      "6.94\n",
      "\n",
      "\n",
      "\n",
      "01/14/2021\n",
      "\n",
      "F  $10 psychological barrier but I believe this could dip to the 9.689.70s for that potential reversal play to break 10+ with potential news from Biden has to say. Looking for a mid term call for this. Could be risky and do a weekly in the money on the dip for a swing tomorrow. However, February 19 $10 has the most volume and interest worth taking as well.\n",
      "\n",
      "01/19/2021\n",
      "\n",
      "01/19/2020 ( all risky plays have an exit strategy or swing strategy)\n",
      "\n",
      "!cd xl\n",
      "\n",
      "52Week High\n",
      "\n",
      "17.94\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "35.00\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "25.26\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "22.25\n",
      "\n",
      "52Week Low\n",
      "\n",
      "20.13\n",
      "\n",
      "\n",
      "\n",
      "01/19/2021\n",
      "\n",
      "XL looking for that dip to 20.1420.50s for a possible  feb 2025 call. However, if this dips to 19.70 and doesn’t recover above 20s at the close then it could be bearish. A break past 21 and then 22+ can signal big move towards the vwap  25.42. Im looking for that rounded tom entry and u shape breakout in a few weeks swing. Trade carefully\n",
      "\n",
      "!cd fubo\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "25.99\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "62.29\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "40.41\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "33.65\n",
      "\n",
      "52Week Low\n",
      "\n",
      "32.13\n",
      "\n",
      "\n",
      "\n",
      "01/19/2021\n",
      "\n",
      "FUBO  I’m liking the cup and handle forming on this. Look for that possible dip from 30.6432 if it does dip there. I think the best play would be $30 calls and looking for that 3542 handle breakout. Most likely can get 3070 percent off the play. Trade carefully this stock can be dangerous if you have don’t have an exit strategy. Under 30 bearish of the formation of the chart.\n",
      "\n",
      "!cd amc\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "1.79\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "7.78\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "5.54\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "4.85\n",
      "\n",
      "52Week Low\n",
      "\n",
      "4.15\n",
      "\n",
      "\n",
      "\n",
      "01/19/2021\n",
      "\n",
      "AMC  most likely you can take the dip around 2.60s for a possible swing but preferable a day trade if you have it for contracts 23 weeks out. Not the weeklies though because could hit a pull back and you would be stuck. All the indicator showing a push. If it breaks out 2.82 I think I can see this break out to the 33.43 as the next target. Trade carefully as this breaks below 2.60 then can drop back to the 2.30 range if the 2.50 doesn’t hope. High risk reward play and make sure you don’t go in heavy or have a stop loss. Depending where this opens this analysis can change. Looking for at least 30 percent or more. Feb 26 or march calls doesn’t seem that bas you can manage your risk. Depending on your strategy I would be careful if it doesn’t breakout.\n",
      "\n",
      "!cd xspa\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "52Week High\n",
      "\n",
      "1.2200\n",
      "\n",
      "Fibonacci 61.8%\n",
      "\n",
      "8.8200\n",
      "\n",
      "Fibonacci 50%\n",
      "\n",
      "5.5081\n",
      "\n",
      "Fibonacci 38.2%\n",
      "\n",
      "4.4850\n",
      "\n",
      "52Week Low\n",
      "\n",
      "3.4619\n",
      "\n",
      "\n",
      "\n",
      "01/19/2021\n",
      "\n",
      "XSPA Looking for a long term swing probably a leap call or July call $1. This is a high reward vs risk play but it is just a long play. Looking for 503000 percent return if it breakout with a 2030 percent stop loss. “Set and forget”\n",
      "\n",
      "01/21/2021\n",
      "\n",
      "1/21/2020 (watchlist only my internet is bad)\n",
      "\n",
      "ATVI. VUZI,NSG,CZR,JKS,OPK,SPPI,TTCF\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "from collections import namedtuple\n",
    "\n",
    "Item = namedtuple('Item', 'state area')\n",
    "items = []\n",
    "resistance2 = []\n",
    "resistance1 = []\n",
    "support1 = []\n",
    "support2 = []\n",
    "badder = []\n",
    "\n",
    "file = open(r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\a.txt', encoding=\"utf8\")\n",
    "# with open(file) as f: \n",
    "for line in file:\n",
    "    l = line.rstrip('\\n') \n",
    "    ticker = l.split(' ', 1)[0]\n",
    "\n",
    "    if (ticker in ticker_list or re.match( r'\\b[A-Z]{3}\\b', ticker) or re.match( r'\\b[A-Z]{2}\\b', ticker) \n",
    "                            or re.match( r'\\b[A-Z]{4}\\b', ticker) or re.match( r'\\b[A-Z]{5}\\b', ticker)):\n",
    "\n",
    "\n",
    "        next(file)\n",
    "        next(file)\n",
    "\n",
    "        res2 = next(file).rstrip('\\n')\n",
    "        if (50 > len(ticker + ' ' + res2) > 5) and res2.startswith('!') == False and '/' not in res2:\n",
    "            resistance2.append(ticker + ' ' + res2)\n",
    "\n",
    "        next(file)\n",
    "\n",
    "        res1 = next(file).rstrip('\\n')\n",
    "        if (len(ticker + ' ' + res1) > 5) and res1.startswith('!') == False and '/' not in res1:\n",
    "            resistance1.append(ticker + ' ' + res1)\n",
    "\n",
    "        next(file)\n",
    "        next(file)\n",
    "        next(file)\n",
    "        supp1 = (next(file)).rstrip('\\n')\n",
    "        if (len(ticker + ' ' + supp1) > 5) and supp1.startswith('!') == False and '/' not in supp1:\n",
    "            support1.append(ticker + ' ' + supp1)\n",
    "\n",
    "        next(file)\n",
    "\n",
    "        supp2 = next(file).rstrip('\\n')\n",
    "        if (len(ticker + ' ' + supp2) > 5) and supp2.startswith('!') == False and '/' not in supp2:\n",
    "            support2.append(ticker + ' ' + supp2)\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        print (next (file))\n",
    "        \n",
    "    else:       \n",
    "        badder.append(l)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Hard Resistance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "      <td>19.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>INTC</td>\n",
       "      <td>52.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GGB</td>\n",
       "      <td>5.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WMT</td>\n",
       "      <td>148.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IGT</td>\n",
       "      <td>17.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WKHS</td>\n",
       "      <td>26.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>GOGO</td>\n",
       "      <td>10.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NEE</td>\n",
       "      <td>81.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FTEK</td>\n",
       "      <td>6.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WATT</td>\n",
       "      <td>2.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>VERU</td>\n",
       "      <td>10.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>TGT</td>\n",
       "      <td>195.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>KR</td>\n",
       "      <td>32.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>UMC</td>\n",
       "      <td>9.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>FAST</td>\n",
       "      <td>51.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>MAC</td>\n",
       "      <td>12.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>JD</td>\n",
       "      <td>92.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>SPWR</td>\n",
       "      <td>33.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>F</td>\n",
       "      <td>10.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>XL</td>\n",
       "      <td>22.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>FUBO</td>\n",
       "      <td>39.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>AMC</td>\n",
       "      <td>2.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>XSPA</td>\n",
       "      <td>1.4900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ticker Hard Resistance\n",
       "0    BBBY           19.00\n",
       "1    INTC           52.14\n",
       "2     GGB            5.23\n",
       "3     WMT          148.35\n",
       "4     IGT           17.89\n",
       "5    WKHS           26.21\n",
       "6    GOGO           10.99\n",
       "7     NEE           81.57\n",
       "8    FTEK            6.43\n",
       "9    WATT            2.77\n",
       "10   VERU           10.14\n",
       "11    TGT          195.83\n",
       "12     KR           32.44\n",
       "13    UMC            9.73\n",
       "14   FAST           51.47\n",
       "15    MAC           12.79\n",
       "16     JD           92.94\n",
       "17   SPWR           33.27\n",
       "18      F           10.20\n",
       "19     XL           22.80\n",
       "20   FUBO           39.49\n",
       "21    AMC            2.90\n",
       "22   XSPA          1.4900"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mid = pd.DataFrame(resistance2, columns = ['whole'])\n",
    "mid[['Ticker','Hard Resistance']] = mid.whole.str.split(expand=True) \n",
    "mid.drop(columns = 'whole',inplace=True)\n",
    "mid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Strong Support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "      <td>17.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>INTC</td>\n",
       "      <td>48.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GGB</td>\n",
       "      <td>4.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WMT</td>\n",
       "      <td>143.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IGT</td>\n",
       "      <td>14.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WKHS</td>\n",
       "      <td>20.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>GOGO</td>\n",
       "      <td>9.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NEE</td>\n",
       "      <td>74.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FTEK</td>\n",
       "      <td>4.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WATT</td>\n",
       "      <td>2.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>VERU</td>\n",
       "      <td>9.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>TGT</td>\n",
       "      <td>189.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>KR</td>\n",
       "      <td>31.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>UMC</td>\n",
       "      <td>8.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>FAST</td>\n",
       "      <td>50.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>MAC</td>\n",
       "      <td>11.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>JD</td>\n",
       "      <td>87.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>SPWR</td>\n",
       "      <td>29.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>F</td>\n",
       "      <td>9.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>XL</td>\n",
       "      <td>19.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>FUBO</td>\n",
       "      <td>30.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>AMC</td>\n",
       "      <td>2.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>XSPA</td>\n",
       "      <td>1.3100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ticker Strong Support\n",
       "0    BBBY          17.22\n",
       "1    INTC          48.17\n",
       "2     GGB           4.79\n",
       "3     WMT         143.19\n",
       "4     IGT          14.69\n",
       "5    WKHS          20.83\n",
       "6    GOGO           9.57\n",
       "7     NEE          74.03\n",
       "8    FTEK           4.65\n",
       "9    WATT           2.07\n",
       "10   VERU           9.02\n",
       "11    TGT         189.69\n",
       "12     KR          31.56\n",
       "13    UMC           8.78\n",
       "14   FAST          50.19\n",
       "15    MAC          11.57\n",
       "16     JD          87.62\n",
       "17   SPWR          29.07\n",
       "18      F           9.64\n",
       "19     XL          19.56\n",
       "20   FUBO          30.49\n",
       "21    AMC           2.16\n",
       "22   XSPA         1.3100"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mid2 = pd.DataFrame(support2, columns = ['whole'])\n",
    "mid2[['Ticker','Strong Support']] = mid2.whole.str.split(expand=True) \n",
    "mid2.drop(columns = 'whole',inplace=True)\n",
    "mid2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Soft Resistance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "      <td>18.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>INTC</td>\n",
       "      <td>50.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GGB</td>\n",
       "      <td>5.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WMT</td>\n",
       "      <td>147.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IGT</td>\n",
       "      <td>17.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WKHS</td>\n",
       "      <td>24.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>GOGO</td>\n",
       "      <td>10.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NEE</td>\n",
       "      <td>80.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FTEK</td>\n",
       "      <td>6.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WATT</td>\n",
       "      <td>2.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>VERU</td>\n",
       "      <td>9.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>TGT</td>\n",
       "      <td>194.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>KR</td>\n",
       "      <td>32.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>UMC</td>\n",
       "      <td>9.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>FAST</td>\n",
       "      <td>51.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>MAC</td>\n",
       "      <td>12.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>JD</td>\n",
       "      <td>92.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>SPWR</td>\n",
       "      <td>32.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>F</td>\n",
       "      <td>10.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>XL</td>\n",
       "      <td>22.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>FUBO</td>\n",
       "      <td>37.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>AMC</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>XSPA</td>\n",
       "      <td>1.4500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ticker Soft Resistance\n",
       "0    BBBY           18.51\n",
       "1    INTC           50.91\n",
       "2     GGB            5.14\n",
       "3     WMT          147.05\n",
       "4     IGT           17.31\n",
       "5    WKHS           24.93\n",
       "6    GOGO           10.62\n",
       "7     NEE           80.00\n",
       "8    FTEK            6.09\n",
       "9    WATT            2.60\n",
       "10   VERU            9.84\n",
       "11    TGT          194.72\n",
       "12     KR           32.23\n",
       "13    UMC            9.46\n",
       "14   FAST           51.18\n",
       "15    MAC           12.40\n",
       "16     JD           92.02\n",
       "17   SPWR           32.10\n",
       "18      F           10.06\n",
       "19     XL           22.24\n",
       "20   FUBO           37.84\n",
       "21    AMC            2.72\n",
       "22   XSPA          1.4500"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mid3 = pd.DataFrame(resistance1, columns = ['whole'])\n",
    "mid3[['Ticker','Soft Resistance']] = mid3.whole.str.split(expand=True) \n",
    "mid3.drop(columns = 'whole',inplace=True)\n",
    "mid3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Soft Support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "      <td>17.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>INTC</td>\n",
       "      <td>48.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GGB</td>\n",
       "      <td>4.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WMT</td>\n",
       "      <td>144.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IGT</td>\n",
       "      <td>15.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WKHS</td>\n",
       "      <td>22.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>GOGO</td>\n",
       "      <td>9.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NEE</td>\n",
       "      <td>76.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FTEK</td>\n",
       "      <td>5.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WATT</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>VERU</td>\n",
       "      <td>9.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>TGT</td>\n",
       "      <td>191.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>KR</td>\n",
       "      <td>31.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>UMC</td>\n",
       "      <td>8.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>FAST</td>\n",
       "      <td>50.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>MAC</td>\n",
       "      <td>11.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>JD</td>\n",
       "      <td>88.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>SPWR</td>\n",
       "      <td>30.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>F</td>\n",
       "      <td>9.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>XL</td>\n",
       "      <td>20.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>FUBO</td>\n",
       "      <td>32.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>AMC</td>\n",
       "      <td>2.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>XSPA</td>\n",
       "      <td>1.3500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ticker Soft Support\n",
       "0    BBBY        17.62\n",
       "1    INTC        48.92\n",
       "2     GGB         4.92\n",
       "3     WMT       144.47\n",
       "4     IGT        15.71\n",
       "5    WKHS        22.24\n",
       "6    GOGO         9.91\n",
       "7     NEE        76.23\n",
       "8    FTEK         5.20\n",
       "9    WATT         2.25\n",
       "10   VERU         9.28\n",
       "11    TGT       191.65\n",
       "12     KR        31.87\n",
       "13    UMC         8.91\n",
       "14   FAST        50.48\n",
       "15    MAC        11.92\n",
       "16     JD        88.86\n",
       "17   SPWR        30.15\n",
       "18      F         9.79\n",
       "19     XL        20.13\n",
       "20   FUBO        32.13\n",
       "21    AMC         2.33\n",
       "22   XSPA       1.3500"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mid4 = pd.DataFrame(support1, columns = ['whole'])\n",
    "mid4[['Ticker','Soft Support']] = mid4.whole.str.split(expand=True) \n",
    "mid4.drop(columns = 'whole',inplace=True)\n",
    "mid4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Info</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BBBY My main watch this one could squeeze nice...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>INTC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>INTC if this can bounce of the 4949.30s an bre...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>GGB a cheap play that could explode if It brea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WMT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WMT (watch at the open)  looking for Walmart f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>IGT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>IGT  looking for that retracement on the dip t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WKHS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WKHS I would like to see this pull back from t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>GOGO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>GOGO shares or options. Look for a bullish rev...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>NEE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>NEE Could be the next rapper play. Watch this ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FTEK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FTEK Looking for a dip around the 5.05.30s and...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>WATT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>WATT nice cup and handle potentially forming. ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>VERU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>VERU interesting pattern and gapped up a lot. ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TGT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>TGT looking for that dip around 188.6  189.12 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>KR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>KR Im liking the chart pattern as Kroger has b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>UMC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>UMC  Im liking this for a long term hold in sh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>FAST</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FAST  Has been trading above that $50 psycholo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>MAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>MAC Looking to have a golden cross on the dail...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>JD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>JD  potential day trade and maybe a swing for ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>SPWR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>SPWR  cup and handle play for a potential dip ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>F  $10 psychological barrier but I believe thi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>XL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>XL looking for that dip to 20.1420.50s for a p...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>FUBO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>FUBO  I’m liking the cup and handle forming on...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>AMC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>AMC  most likely you can take the dip around 2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>XSPA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>XSPA Looking for a long term swing probably a ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>ATVI. VUZI,NSG,CZR,JKS,OPK,SPPI,TTCF</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Info\n",
       "0                                                BBBY\n",
       "1   BBBY My main watch this one could squeeze nice...\n",
       "2                                                INTC\n",
       "3   INTC if this can bounce of the 4949.30s an bre...\n",
       "4                                                 GGB\n",
       "5   GGB a cheap play that could explode if It brea...\n",
       "6                                                 WMT\n",
       "7   WMT (watch at the open)  looking for Walmart f...\n",
       "8                                                 IGT\n",
       "9   IGT  looking for that retracement on the dip t...\n",
       "10                                               WKHS\n",
       "11  WKHS I would like to see this pull back from t...\n",
       "12                                               GOGO\n",
       "13  GOGO shares or options. Look for a bullish rev...\n",
       "14                                                NEE\n",
       "15  NEE Could be the next rapper play. Watch this ...\n",
       "16                                               FTEK\n",
       "17  FTEK Looking for a dip around the 5.05.30s and...\n",
       "18                                               WATT\n",
       "19  WATT nice cup and handle potentially forming. ...\n",
       "20                                               VERU\n",
       "21  VERU interesting pattern and gapped up a lot. ...\n",
       "22                                                TGT\n",
       "23  TGT looking for that dip around 188.6  189.12 ...\n",
       "24                                                 KR\n",
       "25  KR Im liking the chart pattern as Kroger has b...\n",
       "26                                                UMC\n",
       "27  UMC  Im liking this for a long term hold in sh...\n",
       "28                                               FAST\n",
       "29  FAST  Has been trading above that $50 psycholo...\n",
       "30                                                MAC\n",
       "31  MAC Looking to have a golden cross on the dail...\n",
       "32                                                 JD\n",
       "33  JD  potential day trade and maybe a swing for ...\n",
       "34                                               SPWR\n",
       "35  SPWR  cup and handle play for a potential dip ...\n",
       "36                                                  F\n",
       "37  F  $10 psychological barrier but I believe thi...\n",
       "38                                                 XL\n",
       "39  XL looking for that dip to 20.1420.50s for a p...\n",
       "40                                               FUBO\n",
       "41  FUBO  I’m liking the cup and handle forming on...\n",
       "42                                                AMC\n",
       "43  AMC  most likely you can take the dip around 2...\n",
       "44                                               XSPA\n",
       "45  XSPA Looking for a long term swing probably a ...\n",
       "46               ATVI. VUZI,NSG,CZR,JKS,OPK,SPPI,TTCF"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = pd.DataFrame(good, columns = ['Info'])\n",
    "new_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Info</th>\n",
       "      <th>Ticker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "      <td>BBBY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BBBY My main watch this one could squeeze nice...</td>\n",
       "      <td>BBBY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>INTC</td>\n",
       "      <td>INTC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>INTC if this can bounce of the 4949.30s an bre...</td>\n",
       "      <td>INTC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GGB</td>\n",
       "      <td>GGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>GGB a cheap play that could explode if It brea...</td>\n",
       "      <td>GGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WMT</td>\n",
       "      <td>WMT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WMT (watch at the open)  looking for Walmart f...</td>\n",
       "      <td>WMT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>IGT</td>\n",
       "      <td>IGT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>IGT  looking for that retracement on the dip t...</td>\n",
       "      <td>IGT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WKHS</td>\n",
       "      <td>WKHS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WKHS I would like to see this pull back from t...</td>\n",
       "      <td>WKHS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>GOGO</td>\n",
       "      <td>GOGO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>GOGO shares or options. Look for a bullish rev...</td>\n",
       "      <td>GOGO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>NEE</td>\n",
       "      <td>NEE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>NEE Could be the next rapper play. Watch this ...</td>\n",
       "      <td>NEE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FTEK</td>\n",
       "      <td>FTEK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FTEK Looking for a dip around the 5.05.30s and...</td>\n",
       "      <td>FTEK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>WATT</td>\n",
       "      <td>WATT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>WATT nice cup and handle potentially forming. ...</td>\n",
       "      <td>WATT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>VERU</td>\n",
       "      <td>VERU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>VERU interesting pattern and gapped up a lot. ...</td>\n",
       "      <td>VERU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TGT</td>\n",
       "      <td>TGT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>TGT looking for that dip around 188.6  189.12 ...</td>\n",
       "      <td>TGT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>KR</td>\n",
       "      <td>KR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>KR Im liking the chart pattern as Kroger has b...</td>\n",
       "      <td>KR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>UMC</td>\n",
       "      <td>UMC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>UMC  Im liking this for a long term hold in sh...</td>\n",
       "      <td>UMC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>FAST</td>\n",
       "      <td>FAST</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FAST  Has been trading above that $50 psycholo...</td>\n",
       "      <td>FAST</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>MAC</td>\n",
       "      <td>MAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>MAC Looking to have a golden cross on the dail...</td>\n",
       "      <td>MAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>JD</td>\n",
       "      <td>JD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>JD  potential day trade and maybe a swing for ...</td>\n",
       "      <td>JD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>SPWR</td>\n",
       "      <td>SPWR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>SPWR  cup and handle play for a potential dip ...</td>\n",
       "      <td>SPWR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>F  $10 psychological barrier but I believe thi...</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>XL</td>\n",
       "      <td>XL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>XL looking for that dip to 20.1420.50s for a p...</td>\n",
       "      <td>XL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>FUBO</td>\n",
       "      <td>FUBO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>FUBO  I’m liking the cup and handle forming on...</td>\n",
       "      <td>FUBO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>AMC</td>\n",
       "      <td>AMC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>AMC  most likely you can take the dip around 2...</td>\n",
       "      <td>AMC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>XSPA</td>\n",
       "      <td>XSPA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>XSPA Looking for a long term swing probably a ...</td>\n",
       "      <td>XSPA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>ATVI. VUZI,NSG,CZR,JKS,OPK,SPPI,TTCF</td>\n",
       "      <td>ATVI.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Info Ticker\n",
       "0                                                BBBY   BBBY\n",
       "1   BBBY My main watch this one could squeeze nice...   BBBY\n",
       "2                                                INTC   INTC\n",
       "3   INTC if this can bounce of the 4949.30s an bre...   INTC\n",
       "4                                                 GGB    GGB\n",
       "5   GGB a cheap play that could explode if It brea...    GGB\n",
       "6                                                 WMT    WMT\n",
       "7   WMT (watch at the open)  looking for Walmart f...    WMT\n",
       "8                                                 IGT    IGT\n",
       "9   IGT  looking for that retracement on the dip t...    IGT\n",
       "10                                               WKHS   WKHS\n",
       "11  WKHS I would like to see this pull back from t...   WKHS\n",
       "12                                               GOGO   GOGO\n",
       "13  GOGO shares or options. Look for a bullish rev...   GOGO\n",
       "14                                                NEE    NEE\n",
       "15  NEE Could be the next rapper play. Watch this ...    NEE\n",
       "16                                               FTEK   FTEK\n",
       "17  FTEK Looking for a dip around the 5.05.30s and...   FTEK\n",
       "18                                               WATT   WATT\n",
       "19  WATT nice cup and handle potentially forming. ...   WATT\n",
       "20                                               VERU   VERU\n",
       "21  VERU interesting pattern and gapped up a lot. ...   VERU\n",
       "22                                                TGT    TGT\n",
       "23  TGT looking for that dip around 188.6  189.12 ...    TGT\n",
       "24                                                 KR     KR\n",
       "25  KR Im liking the chart pattern as Kroger has b...     KR\n",
       "26                                                UMC    UMC\n",
       "27  UMC  Im liking this for a long term hold in sh...    UMC\n",
       "28                                               FAST   FAST\n",
       "29  FAST  Has been trading above that $50 psycholo...   FAST\n",
       "30                                                MAC    MAC\n",
       "31  MAC Looking to have a golden cross on the dail...    MAC\n",
       "32                                                 JD     JD\n",
       "33  JD  potential day trade and maybe a swing for ...     JD\n",
       "34                                               SPWR   SPWR\n",
       "35  SPWR  cup and handle play for a potential dip ...   SPWR\n",
       "36                                                  F      F\n",
       "37  F  $10 psychological barrier but I believe thi...      F\n",
       "38                                                 XL     XL\n",
       "39  XL looking for that dip to 20.1420.50s for a p...     XL\n",
       "40                                               FUBO   FUBO\n",
       "41  FUBO  I’m liking the cup and handle forming on...   FUBO\n",
       "42                                                AMC    AMC\n",
       "43  AMC  most likely you can take the dip around 2...    AMC\n",
       "44                                               XSPA   XSPA\n",
       "45  XSPA Looking for a long term swing probably a ...   XSPA\n",
       "46               ATVI. VUZI,NSG,CZR,JKS,OPK,SPPI,TTCF  ATVI."
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df = new_df[~new_df['Info'].astype(str).str.startswith('AD')]\n",
    "new_df['Ticker'] = new_df['Info'].str.split(' ').str[0]\n",
    "new_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Info</th>\n",
       "      <th>Ticker</th>\n",
       "      <th>Hard Resistance</th>\n",
       "      <th>Strong Support</th>\n",
       "      <th>Soft Resistance</th>\n",
       "      <th>Soft Support</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BBBY</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>19.00</td>\n",
       "      <td>17.22</td>\n",
       "      <td>18.51</td>\n",
       "      <td>17.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BBBY My main watch this one could squeeze nice...</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>19.00</td>\n",
       "      <td>17.22</td>\n",
       "      <td>18.51</td>\n",
       "      <td>17.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>INTC</td>\n",
       "      <td>INTC</td>\n",
       "      <td>52.14</td>\n",
       "      <td>48.17</td>\n",
       "      <td>50.91</td>\n",
       "      <td>48.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>INTC if this can bounce of the 4949.30s an bre...</td>\n",
       "      <td>INTC</td>\n",
       "      <td>52.14</td>\n",
       "      <td>48.17</td>\n",
       "      <td>50.91</td>\n",
       "      <td>48.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GGB</td>\n",
       "      <td>GGB</td>\n",
       "      <td>5.23</td>\n",
       "      <td>4.79</td>\n",
       "      <td>5.14</td>\n",
       "      <td>4.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>GGB a cheap play that could explode if It brea...</td>\n",
       "      <td>GGB</td>\n",
       "      <td>5.23</td>\n",
       "      <td>4.79</td>\n",
       "      <td>5.14</td>\n",
       "      <td>4.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WMT</td>\n",
       "      <td>WMT</td>\n",
       "      <td>148.35</td>\n",
       "      <td>143.19</td>\n",
       "      <td>147.05</td>\n",
       "      <td>144.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WMT (watch at the open)  looking for Walmart f...</td>\n",
       "      <td>WMT</td>\n",
       "      <td>148.35</td>\n",
       "      <td>143.19</td>\n",
       "      <td>147.05</td>\n",
       "      <td>144.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>IGT</td>\n",
       "      <td>IGT</td>\n",
       "      <td>17.89</td>\n",
       "      <td>14.69</td>\n",
       "      <td>17.31</td>\n",
       "      <td>15.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>IGT  looking for that retracement on the dip t...</td>\n",
       "      <td>IGT</td>\n",
       "      <td>17.89</td>\n",
       "      <td>14.69</td>\n",
       "      <td>17.31</td>\n",
       "      <td>15.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WKHS</td>\n",
       "      <td>WKHS</td>\n",
       "      <td>26.21</td>\n",
       "      <td>20.83</td>\n",
       "      <td>24.93</td>\n",
       "      <td>22.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WKHS I would like to see this pull back from t...</td>\n",
       "      <td>WKHS</td>\n",
       "      <td>26.21</td>\n",
       "      <td>20.83</td>\n",
       "      <td>24.93</td>\n",
       "      <td>22.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>GOGO</td>\n",
       "      <td>GOGO</td>\n",
       "      <td>10.99</td>\n",
       "      <td>9.57</td>\n",
       "      <td>10.62</td>\n",
       "      <td>9.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>GOGO shares or options. Look for a bullish rev...</td>\n",
       "      <td>GOGO</td>\n",
       "      <td>10.99</td>\n",
       "      <td>9.57</td>\n",
       "      <td>10.62</td>\n",
       "      <td>9.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>NEE</td>\n",
       "      <td>NEE</td>\n",
       "      <td>81.57</td>\n",
       "      <td>74.03</td>\n",
       "      <td>80.00</td>\n",
       "      <td>76.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>NEE Could be the next rapper play. Watch this ...</td>\n",
       "      <td>NEE</td>\n",
       "      <td>81.57</td>\n",
       "      <td>74.03</td>\n",
       "      <td>80.00</td>\n",
       "      <td>76.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FTEK</td>\n",
       "      <td>FTEK</td>\n",
       "      <td>6.43</td>\n",
       "      <td>4.65</td>\n",
       "      <td>6.09</td>\n",
       "      <td>5.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FTEK Looking for a dip around the 5.05.30s and...</td>\n",
       "      <td>FTEK</td>\n",
       "      <td>6.43</td>\n",
       "      <td>4.65</td>\n",
       "      <td>6.09</td>\n",
       "      <td>5.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>WATT</td>\n",
       "      <td>WATT</td>\n",
       "      <td>2.77</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.60</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>WATT nice cup and handle potentially forming. ...</td>\n",
       "      <td>WATT</td>\n",
       "      <td>2.77</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.60</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>VERU</td>\n",
       "      <td>VERU</td>\n",
       "      <td>10.14</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.84</td>\n",
       "      <td>9.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>VERU interesting pattern and gapped up a lot. ...</td>\n",
       "      <td>VERU</td>\n",
       "      <td>10.14</td>\n",
       "      <td>9.02</td>\n",
       "      <td>9.84</td>\n",
       "      <td>9.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TGT</td>\n",
       "      <td>TGT</td>\n",
       "      <td>195.83</td>\n",
       "      <td>189.69</td>\n",
       "      <td>194.72</td>\n",
       "      <td>191.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>TGT looking for that dip around 188.6  189.12 ...</td>\n",
       "      <td>TGT</td>\n",
       "      <td>195.83</td>\n",
       "      <td>189.69</td>\n",
       "      <td>194.72</td>\n",
       "      <td>191.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>KR</td>\n",
       "      <td>KR</td>\n",
       "      <td>32.44</td>\n",
       "      <td>31.56</td>\n",
       "      <td>32.23</td>\n",
       "      <td>31.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>KR Im liking the chart pattern as Kroger has b...</td>\n",
       "      <td>KR</td>\n",
       "      <td>32.44</td>\n",
       "      <td>31.56</td>\n",
       "      <td>32.23</td>\n",
       "      <td>31.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>UMC</td>\n",
       "      <td>UMC</td>\n",
       "      <td>9.73</td>\n",
       "      <td>8.78</td>\n",
       "      <td>9.46</td>\n",
       "      <td>8.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>UMC  Im liking this for a long term hold in sh...</td>\n",
       "      <td>UMC</td>\n",
       "      <td>9.73</td>\n",
       "      <td>8.78</td>\n",
       "      <td>9.46</td>\n",
       "      <td>8.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>FAST</td>\n",
       "      <td>FAST</td>\n",
       "      <td>51.47</td>\n",
       "      <td>50.19</td>\n",
       "      <td>51.18</td>\n",
       "      <td>50.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FAST  Has been trading above that $50 psycholo...</td>\n",
       "      <td>FAST</td>\n",
       "      <td>51.47</td>\n",
       "      <td>50.19</td>\n",
       "      <td>51.18</td>\n",
       "      <td>50.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>MAC</td>\n",
       "      <td>MAC</td>\n",
       "      <td>12.79</td>\n",
       "      <td>11.57</td>\n",
       "      <td>12.40</td>\n",
       "      <td>11.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>MAC Looking to have a golden cross on the dail...</td>\n",
       "      <td>MAC</td>\n",
       "      <td>12.79</td>\n",
       "      <td>11.57</td>\n",
       "      <td>12.40</td>\n",
       "      <td>11.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>JD</td>\n",
       "      <td>JD</td>\n",
       "      <td>92.94</td>\n",
       "      <td>87.62</td>\n",
       "      <td>92.02</td>\n",
       "      <td>88.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>JD  potential day trade and maybe a swing for ...</td>\n",
       "      <td>JD</td>\n",
       "      <td>92.94</td>\n",
       "      <td>87.62</td>\n",
       "      <td>92.02</td>\n",
       "      <td>88.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>SPWR</td>\n",
       "      <td>SPWR</td>\n",
       "      <td>33.27</td>\n",
       "      <td>29.07</td>\n",
       "      <td>32.10</td>\n",
       "      <td>30.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>SPWR  cup and handle play for a potential dip ...</td>\n",
       "      <td>SPWR</td>\n",
       "      <td>33.27</td>\n",
       "      <td>29.07</td>\n",
       "      <td>32.10</td>\n",
       "      <td>30.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>F</td>\n",
       "      <td>F</td>\n",
       "      <td>10.20</td>\n",
       "      <td>9.64</td>\n",
       "      <td>10.06</td>\n",
       "      <td>9.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>F  $10 psychological barrier but I believe thi...</td>\n",
       "      <td>F</td>\n",
       "      <td>10.20</td>\n",
       "      <td>9.64</td>\n",
       "      <td>10.06</td>\n",
       "      <td>9.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>XL</td>\n",
       "      <td>XL</td>\n",
       "      <td>22.80</td>\n",
       "      <td>19.56</td>\n",
       "      <td>22.24</td>\n",
       "      <td>20.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>XL looking for that dip to 20.1420.50s for a p...</td>\n",
       "      <td>XL</td>\n",
       "      <td>22.80</td>\n",
       "      <td>19.56</td>\n",
       "      <td>22.24</td>\n",
       "      <td>20.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>FUBO</td>\n",
       "      <td>FUBO</td>\n",
       "      <td>39.49</td>\n",
       "      <td>30.49</td>\n",
       "      <td>37.84</td>\n",
       "      <td>32.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>FUBO  I’m liking the cup and handle forming on...</td>\n",
       "      <td>FUBO</td>\n",
       "      <td>39.49</td>\n",
       "      <td>30.49</td>\n",
       "      <td>37.84</td>\n",
       "      <td>32.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>AMC</td>\n",
       "      <td>AMC</td>\n",
       "      <td>2.90</td>\n",
       "      <td>2.16</td>\n",
       "      <td>2.72</td>\n",
       "      <td>2.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>AMC  most likely you can take the dip around 2...</td>\n",
       "      <td>AMC</td>\n",
       "      <td>2.90</td>\n",
       "      <td>2.16</td>\n",
       "      <td>2.72</td>\n",
       "      <td>2.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>XSPA</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>1.4900</td>\n",
       "      <td>1.3100</td>\n",
       "      <td>1.4500</td>\n",
       "      <td>1.3500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>XSPA Looking for a long term swing probably a ...</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>1.4900</td>\n",
       "      <td>1.3100</td>\n",
       "      <td>1.4500</td>\n",
       "      <td>1.3500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Info Ticker Hard Resistance  \\\n",
       "0                                                BBBY   BBBY           19.00   \n",
       "1   BBBY My main watch this one could squeeze nice...   BBBY           19.00   \n",
       "2                                                INTC   INTC           52.14   \n",
       "3   INTC if this can bounce of the 4949.30s an bre...   INTC           52.14   \n",
       "4                                                 GGB    GGB            5.23   \n",
       "5   GGB a cheap play that could explode if It brea...    GGB            5.23   \n",
       "6                                                 WMT    WMT          148.35   \n",
       "7   WMT (watch at the open)  looking for Walmart f...    WMT          148.35   \n",
       "8                                                 IGT    IGT           17.89   \n",
       "9   IGT  looking for that retracement on the dip t...    IGT           17.89   \n",
       "10                                               WKHS   WKHS           26.21   \n",
       "11  WKHS I would like to see this pull back from t...   WKHS           26.21   \n",
       "12                                               GOGO   GOGO           10.99   \n",
       "13  GOGO shares or options. Look for a bullish rev...   GOGO           10.99   \n",
       "14                                                NEE    NEE           81.57   \n",
       "15  NEE Could be the next rapper play. Watch this ...    NEE           81.57   \n",
       "16                                               FTEK   FTEK            6.43   \n",
       "17  FTEK Looking for a dip around the 5.05.30s and...   FTEK            6.43   \n",
       "18                                               WATT   WATT            2.77   \n",
       "19  WATT nice cup and handle potentially forming. ...   WATT            2.77   \n",
       "20                                               VERU   VERU           10.14   \n",
       "21  VERU interesting pattern and gapped up a lot. ...   VERU           10.14   \n",
       "22                                                TGT    TGT          195.83   \n",
       "23  TGT looking for that dip around 188.6  189.12 ...    TGT          195.83   \n",
       "24                                                 KR     KR           32.44   \n",
       "25  KR Im liking the chart pattern as Kroger has b...     KR           32.44   \n",
       "26                                                UMC    UMC            9.73   \n",
       "27  UMC  Im liking this for a long term hold in sh...    UMC            9.73   \n",
       "28                                               FAST   FAST           51.47   \n",
       "29  FAST  Has been trading above that $50 psycholo...   FAST           51.47   \n",
       "30                                                MAC    MAC           12.79   \n",
       "31  MAC Looking to have a golden cross on the dail...    MAC           12.79   \n",
       "32                                                 JD     JD           92.94   \n",
       "33  JD  potential day trade and maybe a swing for ...     JD           92.94   \n",
       "34                                               SPWR   SPWR           33.27   \n",
       "35  SPWR  cup and handle play for a potential dip ...   SPWR           33.27   \n",
       "36                                                  F      F           10.20   \n",
       "37  F  $10 psychological barrier but I believe thi...      F           10.20   \n",
       "38                                                 XL     XL           22.80   \n",
       "39  XL looking for that dip to 20.1420.50s for a p...     XL           22.80   \n",
       "40                                               FUBO   FUBO           39.49   \n",
       "41  FUBO  I’m liking the cup and handle forming on...   FUBO           39.49   \n",
       "42                                                AMC    AMC            2.90   \n",
       "43  AMC  most likely you can take the dip around 2...    AMC            2.90   \n",
       "44                                               XSPA   XSPA          1.4900   \n",
       "45  XSPA Looking for a long term swing probably a ...   XSPA          1.4900   \n",
       "\n",
       "   Strong Support Soft Resistance Soft Support  \n",
       "0           17.22           18.51        17.62  \n",
       "1           17.22           18.51        17.62  \n",
       "2           48.17           50.91        48.92  \n",
       "3           48.17           50.91        48.92  \n",
       "4            4.79            5.14         4.92  \n",
       "5            4.79            5.14         4.92  \n",
       "6          143.19          147.05       144.47  \n",
       "7          143.19          147.05       144.47  \n",
       "8           14.69           17.31        15.71  \n",
       "9           14.69           17.31        15.71  \n",
       "10          20.83           24.93        22.24  \n",
       "11          20.83           24.93        22.24  \n",
       "12           9.57           10.62         9.91  \n",
       "13           9.57           10.62         9.91  \n",
       "14          74.03           80.00        76.23  \n",
       "15          74.03           80.00        76.23  \n",
       "16           4.65            6.09         5.20  \n",
       "17           4.65            6.09         5.20  \n",
       "18           2.07            2.60         2.25  \n",
       "19           2.07            2.60         2.25  \n",
       "20           9.02            9.84         9.28  \n",
       "21           9.02            9.84         9.28  \n",
       "22         189.69          194.72       191.65  \n",
       "23         189.69          194.72       191.65  \n",
       "24          31.56           32.23        31.87  \n",
       "25          31.56           32.23        31.87  \n",
       "26           8.78            9.46         8.91  \n",
       "27           8.78            9.46         8.91  \n",
       "28          50.19           51.18        50.48  \n",
       "29          50.19           51.18        50.48  \n",
       "30          11.57           12.40        11.92  \n",
       "31          11.57           12.40        11.92  \n",
       "32          87.62           92.02        88.86  \n",
       "33          87.62           92.02        88.86  \n",
       "34          29.07           32.10        30.15  \n",
       "35          29.07           32.10        30.15  \n",
       "36           9.64           10.06         9.79  \n",
       "37           9.64           10.06         9.79  \n",
       "38          19.56           22.24        20.13  \n",
       "39          19.56           22.24        20.13  \n",
       "40          30.49           37.84        32.13  \n",
       "41          30.49           37.84        32.13  \n",
       "42           2.16            2.72         2.33  \n",
       "43           2.16            2.72         2.33  \n",
       "44         1.3100          1.4500       1.3500  \n",
       "45         1.3100          1.4500       1.3500  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newer_df = pd.merge(new_df, mid, on = 'Ticker')\n",
    "newer_df1 = pd.merge(newer_df, mid2, on = 'Ticker')\n",
    "newer_df2 = pd.merge(newer_df1, mid3, on = 'Ticker')\n",
    "newer_df3 = pd.merge(newer_df2, mid4, on = 'Ticker')\n",
    "\n",
    "newer_df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = (\n",
    "    newer_df3.assign(count=(newer_df3[\"Info\"].str.len()))\n",
    "    .drop_duplicates(subset=[\"Ticker\"], keep=\"last\")\n",
    ").drop('count',axis=1)\n",
    "# df1 = df1.head(2)\n",
    "ticker_list2 = df1['Ticker'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df1 = df1.set_index(df1['Ticker'])\n",
    "# df1.drop(columns = ['Ticker'],inplace= True)\n",
    "# df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>symbol</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1992-06-05</th>\n",
       "      <td>1.156250</td>\n",
       "      <td>1.046875</td>\n",
       "      <td>1.12500</td>\n",
       "      <td>1.062500</td>\n",
       "      <td>77576000.0</td>\n",
       "      <td>0.926381</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1992-06-08</th>\n",
       "      <td>1.093750</td>\n",
       "      <td>1.031250</td>\n",
       "      <td>1.09375</td>\n",
       "      <td>1.031250</td>\n",
       "      <td>13020800.0</td>\n",
       "      <td>0.899134</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>-0.029412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1992-06-09</th>\n",
       "      <td>1.078125</td>\n",
       "      <td>1.031250</td>\n",
       "      <td>1.06250</td>\n",
       "      <td>1.046875</td>\n",
       "      <td>8281600.0</td>\n",
       "      <td>0.912758</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>0.015152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1992-06-10</th>\n",
       "      <td>1.046875</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.03125</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4707200.0</td>\n",
       "      <td>0.871888</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>-0.044776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1992-06-11</th>\n",
       "      <td>1.015625</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.992188</td>\n",
       "      <td>4974400.0</td>\n",
       "      <td>0.865077</td>\n",
       "      <td>BBBY</td>\n",
       "      <td>-0.007812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-15</th>\n",
       "      <td>1.410000</td>\n",
       "      <td>1.320000</td>\n",
       "      <td>1.41000</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>5736500.0</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.035714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-19</th>\n",
       "      <td>1.410000</td>\n",
       "      <td>1.360000</td>\n",
       "      <td>1.39000</td>\n",
       "      <td>1.380000</td>\n",
       "      <td>6454800.0</td>\n",
       "      <td>1.380000</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.022222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-20</th>\n",
       "      <td>1.560000</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>1.42000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>13773700.0</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.086957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-21</th>\n",
       "      <td>1.650000</td>\n",
       "      <td>1.430000</td>\n",
       "      <td>1.54000</td>\n",
       "      <td>1.610000</td>\n",
       "      <td>13021400.0</td>\n",
       "      <td>1.610000</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.073333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-22</th>\n",
       "      <td>1.810000</td>\n",
       "      <td>1.550000</td>\n",
       "      <td>1.60000</td>\n",
       "      <td>1.740000</td>\n",
       "      <td>17047000.0</td>\n",
       "      <td>1.740000</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.080745</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>116618 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                High       Low     Open     Close      Volume  Adj Close  \\\n",
       "Date                                                                       \n",
       "1992-06-05  1.156250  1.046875  1.12500  1.062500  77576000.0   0.926381   \n",
       "1992-06-08  1.093750  1.031250  1.09375  1.031250  13020800.0   0.899134   \n",
       "1992-06-09  1.078125  1.031250  1.06250  1.046875   8281600.0   0.912758   \n",
       "1992-06-10  1.046875  1.000000  1.03125  1.000000   4707200.0   0.871888   \n",
       "1992-06-11  1.015625  0.984375  1.00000  0.992188   4974400.0   0.865077   \n",
       "...              ...       ...      ...       ...         ...        ...   \n",
       "2021-01-15  1.410000  1.320000  1.41000  1.350000   5736500.0   1.350000   \n",
       "2021-01-19  1.410000  1.360000  1.39000  1.380000   6454800.0   1.380000   \n",
       "2021-01-20  1.560000  1.350000  1.42000  1.500000  13773700.0   1.500000   \n",
       "2021-01-21  1.650000  1.430000  1.54000  1.610000  13021400.0   1.610000   \n",
       "2021-01-22  1.810000  1.550000  1.60000  1.740000  17047000.0   1.740000   \n",
       "\n",
       "           symbol    return  \n",
       "Date                         \n",
       "1992-06-05   BBBY       NaN  \n",
       "1992-06-08   BBBY -0.029412  \n",
       "1992-06-09   BBBY  0.015152  \n",
       "1992-06-10   BBBY -0.044776  \n",
       "1992-06-11   BBBY -0.007812  \n",
       "...           ...       ...  \n",
       "2021-01-15   XSPA -0.035714  \n",
       "2021-01-19   XSPA  0.022222  \n",
       "2021-01-20   XSPA  0.086957  \n",
       "2021-01-21   XSPA  0.073333  \n",
       "2021-01-22   XSPA  0.080745  \n",
       "\n",
       "[116618 rows x 8 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#extracting A  Yahoo Finance API\n",
    "tickers = df1['Ticker']\n",
    "all_data = pd.DataFrame()\n",
    "test_data = pd.DataFrame()\n",
    "no_data = []\n",
    "\n",
    "for i in tickers:\n",
    "    try:\n",
    "        test_data = pdr.get_data_yahoo(i, start = dt.datetime(1990,1,2), end = dt.date.today())\n",
    "        test_data['symbol'] = i\n",
    "        all_data = all_data.append(test_data)\n",
    "    except:\n",
    "        no_data.append(i)\n",
    "\n",
    "#Creating Return column\n",
    "all_data['return'] = all_data.groupby('symbol')['Close'].pct_change() \n",
    "all_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isSupport(df,i):\n",
    "  support = df['Low'][i-2] < df['Low'][i-3]  and df['Low'][i-2] < df['Low'][i-1] and df['Low'][i-1] < df['Low'][i] and df['Low'][i-3] < df['Low'][i-4]\n",
    "  return support\n",
    "def isResistance(df,i):\n",
    "  resistance = df['High'][i-2] > df['High'][i-3]  and df['High'][i-2] > df['High'][i-1] and df['High'][i-1] > df['High'][i] and df['High'][i-3] > df['High'][i-4]\n",
    "  return resistance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# all_data['Date1'] = pd.to_datetime(all_data.index)\n",
    "# all_data['Date1'] = all_data['Date1'].apply(mpl_dates.date2num)\n",
    "# all_data\n",
    "# levels = []\n",
    "# for i in range(0,all_data.shape[0]):\n",
    "#   if isSupport(all_data,i):\n",
    "#     levels.append((all_data['Date1'][i],all_data['Low'][i]))\n",
    "#   elif isResistance(all_data,i):\n",
    "#     levels.append((all_data['Date1'][i],all_data['High'][i]))\n",
    "#   else:\n",
    "#     levels.append((all_data['Date1'][i],0))\n",
    "\n",
    "# df = pd.DataFrame(levels, columns=['Date1', 'levels'])\n",
    "# all_data = pd.merge(all_data, df, on=[\"Date1\"], right_index=True, how= 'outer')\n",
    "# all_data.tail(50)\n",
    "# all_data['levels']=all_data['levels'].replace(to_replace=0, method='ffill')\n",
    "# df.levels.fillna(method='ffill',inplace=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>symbol</th>\n",
       "      <th>return</th>\n",
       "      <th>SMA_5</th>\n",
       "      <th>SMA_15</th>\n",
       "      <th>SMA_10</th>\n",
       "      <th>SMA_20</th>\n",
       "      <th>SMA_ratio</th>\n",
       "      <th>SMA_ratio2</th>\n",
       "      <th>SMA_ratio3</th>\n",
       "      <th>SMA_ratio4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-11-10</th>\n",
       "      <td>1.77</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1941900.0</td>\n",
       "      <td>1.74</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.016949</td>\n",
       "      <td>1.850</td>\n",
       "      <td>1.922000</td>\n",
       "      <td>1.888</td>\n",
       "      <td>1.922000</td>\n",
       "      <td>1.038919</td>\n",
       "      <td>1.020541</td>\n",
       "      <td>1.018008</td>\n",
       "      <td>1.018008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-11</th>\n",
       "      <td>1.86</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.72</td>\n",
       "      <td>1.79</td>\n",
       "      <td>5307800.0</td>\n",
       "      <td>1.79</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.028736</td>\n",
       "      <td>1.830</td>\n",
       "      <td>1.908000</td>\n",
       "      <td>1.866</td>\n",
       "      <td>1.908000</td>\n",
       "      <td>1.042623</td>\n",
       "      <td>1.019672</td>\n",
       "      <td>1.022508</td>\n",
       "      <td>1.022508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-12</th>\n",
       "      <td>1.82</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2894500.0</td>\n",
       "      <td>1.78</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.005587</td>\n",
       "      <td>1.796</td>\n",
       "      <td>1.893333</td>\n",
       "      <td>1.849</td>\n",
       "      <td>1.893333</td>\n",
       "      <td>1.054195</td>\n",
       "      <td>1.029510</td>\n",
       "      <td>1.023977</td>\n",
       "      <td>1.023977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-13</th>\n",
       "      <td>1.92</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.84</td>\n",
       "      <td>1.87</td>\n",
       "      <td>4868400.0</td>\n",
       "      <td>1.87</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.050562</td>\n",
       "      <td>1.790</td>\n",
       "      <td>1.886667</td>\n",
       "      <td>1.850</td>\n",
       "      <td>1.886667</td>\n",
       "      <td>1.054004</td>\n",
       "      <td>1.033520</td>\n",
       "      <td>1.019820</td>\n",
       "      <td>1.019820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-16</th>\n",
       "      <td>1.91</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1.87</td>\n",
       "      <td>1.85</td>\n",
       "      <td>4374200.0</td>\n",
       "      <td>1.85</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.010695</td>\n",
       "      <td>1.806</td>\n",
       "      <td>1.875333</td>\n",
       "      <td>1.848</td>\n",
       "      <td>1.875333</td>\n",
       "      <td>1.038391</td>\n",
       "      <td>1.023256</td>\n",
       "      <td>1.014791</td>\n",
       "      <td>1.014791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-17</th>\n",
       "      <td>1.78</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.70</td>\n",
       "      <td>4427200.0</td>\n",
       "      <td>1.70</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.081081</td>\n",
       "      <td>1.798</td>\n",
       "      <td>1.858000</td>\n",
       "      <td>1.824</td>\n",
       "      <td>1.858000</td>\n",
       "      <td>1.033370</td>\n",
       "      <td>1.014461</td>\n",
       "      <td>1.018640</td>\n",
       "      <td>1.018640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-18</th>\n",
       "      <td>1.73</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.67</td>\n",
       "      <td>2940600.0</td>\n",
       "      <td>1.67</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.017647</td>\n",
       "      <td>1.774</td>\n",
       "      <td>1.835333</td>\n",
       "      <td>1.802</td>\n",
       "      <td>1.835333</td>\n",
       "      <td>1.034573</td>\n",
       "      <td>1.015784</td>\n",
       "      <td>1.018498</td>\n",
       "      <td>1.018498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-19</th>\n",
       "      <td>1.66</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.64</td>\n",
       "      <td>2773900.0</td>\n",
       "      <td>1.64</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.017964</td>\n",
       "      <td>1.746</td>\n",
       "      <td>1.814667</td>\n",
       "      <td>1.771</td>\n",
       "      <td>1.814667</td>\n",
       "      <td>1.039328</td>\n",
       "      <td>1.014318</td>\n",
       "      <td>1.024657</td>\n",
       "      <td>1.024657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-20</th>\n",
       "      <td>1.65</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.64</td>\n",
       "      <td>1.62</td>\n",
       "      <td>2633600.0</td>\n",
       "      <td>1.62</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.012195</td>\n",
       "      <td>1.696</td>\n",
       "      <td>1.798667</td>\n",
       "      <td>1.743</td>\n",
       "      <td>1.798667</td>\n",
       "      <td>1.060535</td>\n",
       "      <td>1.027712</td>\n",
       "      <td>1.031937</td>\n",
       "      <td>1.031937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-23</th>\n",
       "      <td>1.78</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.72</td>\n",
       "      <td>5875300.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.061728</td>\n",
       "      <td>1.670</td>\n",
       "      <td>1.788667</td>\n",
       "      <td>1.738</td>\n",
       "      <td>1.788667</td>\n",
       "      <td>1.071058</td>\n",
       "      <td>1.040719</td>\n",
       "      <td>1.029152</td>\n",
       "      <td>1.029152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-24</th>\n",
       "      <td>1.74</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1.65</td>\n",
       "      <td>3718100.0</td>\n",
       "      <td>1.65</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.040698</td>\n",
       "      <td>1.660</td>\n",
       "      <td>1.769333</td>\n",
       "      <td>1.729</td>\n",
       "      <td>1.769333</td>\n",
       "      <td>1.065863</td>\n",
       "      <td>1.041566</td>\n",
       "      <td>1.023328</td>\n",
       "      <td>1.023328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-25</th>\n",
       "      <td>1.71</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.68</td>\n",
       "      <td>2421400.0</td>\n",
       "      <td>1.68</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.018182</td>\n",
       "      <td>1.662</td>\n",
       "      <td>1.755333</td>\n",
       "      <td>1.718</td>\n",
       "      <td>1.755333</td>\n",
       "      <td>1.056157</td>\n",
       "      <td>1.033694</td>\n",
       "      <td>1.021731</td>\n",
       "      <td>1.021731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-27</th>\n",
       "      <td>1.70</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1350200.0</td>\n",
       "      <td>1.68</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.670</td>\n",
       "      <td>1.737333</td>\n",
       "      <td>1.708</td>\n",
       "      <td>1.737333</td>\n",
       "      <td>1.040319</td>\n",
       "      <td>1.022754</td>\n",
       "      <td>1.017174</td>\n",
       "      <td>1.017174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-30</th>\n",
       "      <td>1.69</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.64</td>\n",
       "      <td>3157200.0</td>\n",
       "      <td>1.64</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.023810</td>\n",
       "      <td>1.674</td>\n",
       "      <td>1.720000</td>\n",
       "      <td>1.685</td>\n",
       "      <td>1.720000</td>\n",
       "      <td>1.027479</td>\n",
       "      <td>1.006571</td>\n",
       "      <td>1.020772</td>\n",
       "      <td>1.020772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-01</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.50</td>\n",
       "      <td>5733500.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.085366</td>\n",
       "      <td>1.630</td>\n",
       "      <td>1.702000</td>\n",
       "      <td>1.650</td>\n",
       "      <td>1.702000</td>\n",
       "      <td>1.044172</td>\n",
       "      <td>1.012270</td>\n",
       "      <td>1.031515</td>\n",
       "      <td>1.031515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-02</th>\n",
       "      <td>1.48</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.45</td>\n",
       "      <td>3221100.0</td>\n",
       "      <td>1.45</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.033333</td>\n",
       "      <td>1.590</td>\n",
       "      <td>1.682667</td>\n",
       "      <td>1.625</td>\n",
       "      <td>1.682667</td>\n",
       "      <td>1.058281</td>\n",
       "      <td>1.022013</td>\n",
       "      <td>1.035487</td>\n",
       "      <td>1.035487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-03</th>\n",
       "      <td>1.47</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.43</td>\n",
       "      <td>5388800.0</td>\n",
       "      <td>1.43</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.013793</td>\n",
       "      <td>1.540</td>\n",
       "      <td>1.658667</td>\n",
       "      <td>1.601</td>\n",
       "      <td>1.658667</td>\n",
       "      <td>1.077056</td>\n",
       "      <td>1.039610</td>\n",
       "      <td>1.036019</td>\n",
       "      <td>1.036019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-04</th>\n",
       "      <td>1.59</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.46</td>\n",
       "      <td>1.57</td>\n",
       "      <td>6032400.0</td>\n",
       "      <td>1.57</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.097902</td>\n",
       "      <td>1.518</td>\n",
       "      <td>1.644667</td>\n",
       "      <td>1.594</td>\n",
       "      <td>1.644667</td>\n",
       "      <td>1.083443</td>\n",
       "      <td>1.050066</td>\n",
       "      <td>1.031786</td>\n",
       "      <td>1.031786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-07</th>\n",
       "      <td>1.64</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.59</td>\n",
       "      <td>3963200.0</td>\n",
       "      <td>1.59</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.012739</td>\n",
       "      <td>1.508</td>\n",
       "      <td>1.626000</td>\n",
       "      <td>1.591</td>\n",
       "      <td>1.626000</td>\n",
       "      <td>1.078249</td>\n",
       "      <td>1.055040</td>\n",
       "      <td>1.021999</td>\n",
       "      <td>1.021999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-08</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.52</td>\n",
       "      <td>3069900.0</td>\n",
       "      <td>1.52</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.044025</td>\n",
       "      <td>1.512</td>\n",
       "      <td>1.604000</td>\n",
       "      <td>1.571</td>\n",
       "      <td>1.604000</td>\n",
       "      <td>1.060847</td>\n",
       "      <td>1.039021</td>\n",
       "      <td>1.021006</td>\n",
       "      <td>1.021006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-09</th>\n",
       "      <td>1.52</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.51</td>\n",
       "      <td>1.46</td>\n",
       "      <td>3130200.0</td>\n",
       "      <td>1.46</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.039474</td>\n",
       "      <td>1.514</td>\n",
       "      <td>1.588000</td>\n",
       "      <td>1.552</td>\n",
       "      <td>1.588000</td>\n",
       "      <td>1.048877</td>\n",
       "      <td>1.025099</td>\n",
       "      <td>1.023196</td>\n",
       "      <td>1.023196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-10</th>\n",
       "      <td>1.47</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.44</td>\n",
       "      <td>2139200.0</td>\n",
       "      <td>1.44</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.013699</td>\n",
       "      <td>1.516</td>\n",
       "      <td>1.572667</td>\n",
       "      <td>1.528</td>\n",
       "      <td>1.572667</td>\n",
       "      <td>1.037379</td>\n",
       "      <td>1.007916</td>\n",
       "      <td>1.029232</td>\n",
       "      <td>1.029232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-11</th>\n",
       "      <td>1.49</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.44</td>\n",
       "      <td>1.45</td>\n",
       "      <td>2041600.0</td>\n",
       "      <td>1.45</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.006944</td>\n",
       "      <td>1.492</td>\n",
       "      <td>1.560000</td>\n",
       "      <td>1.505</td>\n",
       "      <td>1.560000</td>\n",
       "      <td>1.045576</td>\n",
       "      <td>1.008713</td>\n",
       "      <td>1.036545</td>\n",
       "      <td>1.036545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-14</th>\n",
       "      <td>1.50</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.44</td>\n",
       "      <td>2086700.0</td>\n",
       "      <td>1.44</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.006897</td>\n",
       "      <td>1.462</td>\n",
       "      <td>1.548000</td>\n",
       "      <td>1.485</td>\n",
       "      <td>1.548000</td>\n",
       "      <td>1.058824</td>\n",
       "      <td>1.015732</td>\n",
       "      <td>1.042424</td>\n",
       "      <td>1.042424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-15</th>\n",
       "      <td>1.45</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.45</td>\n",
       "      <td>1.41</td>\n",
       "      <td>2479400.0</td>\n",
       "      <td>1.41</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.020833</td>\n",
       "      <td>1.440</td>\n",
       "      <td>1.527333</td>\n",
       "      <td>1.476</td>\n",
       "      <td>1.527333</td>\n",
       "      <td>1.060648</td>\n",
       "      <td>1.025000</td>\n",
       "      <td>1.034779</td>\n",
       "      <td>1.034779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-16</th>\n",
       "      <td>1.45</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.45</td>\n",
       "      <td>2514100.0</td>\n",
       "      <td>1.45</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.028369</td>\n",
       "      <td>1.438</td>\n",
       "      <td>1.514000</td>\n",
       "      <td>1.476</td>\n",
       "      <td>1.514000</td>\n",
       "      <td>1.052851</td>\n",
       "      <td>1.026426</td>\n",
       "      <td>1.025745</td>\n",
       "      <td>1.025745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-17</th>\n",
       "      <td>1.98</td>\n",
       "      <td>1.31</td>\n",
       "      <td>1.78</td>\n",
       "      <td>1.37</td>\n",
       "      <td>73140500.0</td>\n",
       "      <td>1.37</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.055172</td>\n",
       "      <td>1.424</td>\n",
       "      <td>1.493333</td>\n",
       "      <td>1.470</td>\n",
       "      <td>1.493333</td>\n",
       "      <td>1.048689</td>\n",
       "      <td>1.032303</td>\n",
       "      <td>1.015873</td>\n",
       "      <td>1.015873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-18</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.34</td>\n",
       "      <td>11295200.0</td>\n",
       "      <td>1.34</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.021898</td>\n",
       "      <td>1.402</td>\n",
       "      <td>1.470667</td>\n",
       "      <td>1.447</td>\n",
       "      <td>1.470667</td>\n",
       "      <td>1.048978</td>\n",
       "      <td>1.032097</td>\n",
       "      <td>1.016356</td>\n",
       "      <td>1.016356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-21</th>\n",
       "      <td>1.44</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.40</td>\n",
       "      <td>1.44</td>\n",
       "      <td>13684800.0</td>\n",
       "      <td>1.44</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.074627</td>\n",
       "      <td>1.402</td>\n",
       "      <td>1.457333</td>\n",
       "      <td>1.432</td>\n",
       "      <td>1.457333</td>\n",
       "      <td>1.039467</td>\n",
       "      <td>1.021398</td>\n",
       "      <td>1.017691</td>\n",
       "      <td>1.017691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-22</th>\n",
       "      <td>1.42</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.42</td>\n",
       "      <td>7896400.0</td>\n",
       "      <td>1.42</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.013889</td>\n",
       "      <td>1.404</td>\n",
       "      <td>1.452000</td>\n",
       "      <td>1.422</td>\n",
       "      <td>1.452000</td>\n",
       "      <td>1.034188</td>\n",
       "      <td>1.012821</td>\n",
       "      <td>1.021097</td>\n",
       "      <td>1.021097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-23</th>\n",
       "      <td>1.40</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.37</td>\n",
       "      <td>1.38</td>\n",
       "      <td>5935200.0</td>\n",
       "      <td>1.38</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.028169</td>\n",
       "      <td>1.390</td>\n",
       "      <td>1.447333</td>\n",
       "      <td>1.414</td>\n",
       "      <td>1.447333</td>\n",
       "      <td>1.041247</td>\n",
       "      <td>1.017266</td>\n",
       "      <td>1.023574</td>\n",
       "      <td>1.023574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-24</th>\n",
       "      <td>1.39</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.35</td>\n",
       "      <td>4801800.0</td>\n",
       "      <td>1.35</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.021739</td>\n",
       "      <td>1.386</td>\n",
       "      <td>1.442000</td>\n",
       "      <td>1.405</td>\n",
       "      <td>1.442000</td>\n",
       "      <td>1.040404</td>\n",
       "      <td>1.013709</td>\n",
       "      <td>1.026335</td>\n",
       "      <td>1.026335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-28</th>\n",
       "      <td>1.38</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.28</td>\n",
       "      <td>9116600.0</td>\n",
       "      <td>1.28</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.051852</td>\n",
       "      <td>1.374</td>\n",
       "      <td>1.422667</td>\n",
       "      <td>1.388</td>\n",
       "      <td>1.422667</td>\n",
       "      <td>1.035420</td>\n",
       "      <td>1.010189</td>\n",
       "      <td>1.024976</td>\n",
       "      <td>1.024976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29</th>\n",
       "      <td>1.28</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.20</td>\n",
       "      <td>12514800.0</td>\n",
       "      <td>1.20</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.062500</td>\n",
       "      <td>1.326</td>\n",
       "      <td>1.396667</td>\n",
       "      <td>1.364</td>\n",
       "      <td>1.396667</td>\n",
       "      <td>1.053293</td>\n",
       "      <td>1.028658</td>\n",
       "      <td>1.023949</td>\n",
       "      <td>1.023949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-30</th>\n",
       "      <td>1.28</td>\n",
       "      <td>1.17</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.26</td>\n",
       "      <td>7901000.0</td>\n",
       "      <td>1.26</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>1.294</td>\n",
       "      <td>1.379333</td>\n",
       "      <td>1.349</td>\n",
       "      <td>1.379333</td>\n",
       "      <td>1.065945</td>\n",
       "      <td>1.042504</td>\n",
       "      <td>1.022486</td>\n",
       "      <td>1.022486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-31</th>\n",
       "      <td>1.27</td>\n",
       "      <td>1.17</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6684400.0</td>\n",
       "      <td>1.19</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.055556</td>\n",
       "      <td>1.256</td>\n",
       "      <td>1.361333</td>\n",
       "      <td>1.323</td>\n",
       "      <td>1.361333</td>\n",
       "      <td>1.083864</td>\n",
       "      <td>1.053344</td>\n",
       "      <td>1.028975</td>\n",
       "      <td>1.028975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-04</th>\n",
       "      <td>1.22</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7103800.0</td>\n",
       "      <td>1.19</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.224</td>\n",
       "      <td>1.344667</td>\n",
       "      <td>1.305</td>\n",
       "      <td>1.344667</td>\n",
       "      <td>1.098584</td>\n",
       "      <td>1.066176</td>\n",
       "      <td>1.030396</td>\n",
       "      <td>1.030396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>1.36</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.25</td>\n",
       "      <td>25332100.0</td>\n",
       "      <td>1.25</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.050420</td>\n",
       "      <td>1.218</td>\n",
       "      <td>1.331333</td>\n",
       "      <td>1.296</td>\n",
       "      <td>1.331333</td>\n",
       "      <td>1.093049</td>\n",
       "      <td>1.064039</td>\n",
       "      <td>1.027263</td>\n",
       "      <td>1.027263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>1.31</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7036400.0</td>\n",
       "      <td>1.19</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.048000</td>\n",
       "      <td>1.216</td>\n",
       "      <td>1.314667</td>\n",
       "      <td>1.271</td>\n",
       "      <td>1.314667</td>\n",
       "      <td>1.081140</td>\n",
       "      <td>1.045230</td>\n",
       "      <td>1.034356</td>\n",
       "      <td>1.034356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-07</th>\n",
       "      <td>1.24</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.21</td>\n",
       "      <td>3639300.0</td>\n",
       "      <td>1.21</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.016807</td>\n",
       "      <td>1.206</td>\n",
       "      <td>1.301333</td>\n",
       "      <td>1.250</td>\n",
       "      <td>1.301333</td>\n",
       "      <td>1.079049</td>\n",
       "      <td>1.036484</td>\n",
       "      <td>1.041067</td>\n",
       "      <td>1.041067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08</th>\n",
       "      <td>1.25</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.20</td>\n",
       "      <td>4610700.0</td>\n",
       "      <td>1.20</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>1.208</td>\n",
       "      <td>1.284667</td>\n",
       "      <td>1.232</td>\n",
       "      <td>1.284667</td>\n",
       "      <td>1.063466</td>\n",
       "      <td>1.019868</td>\n",
       "      <td>1.042749</td>\n",
       "      <td>1.042749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-11</th>\n",
       "      <td>1.24</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.20</td>\n",
       "      <td>4653300.0</td>\n",
       "      <td>1.20</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.210</td>\n",
       "      <td>1.273333</td>\n",
       "      <td>1.217</td>\n",
       "      <td>1.273333</td>\n",
       "      <td>1.052342</td>\n",
       "      <td>1.005785</td>\n",
       "      <td>1.046289</td>\n",
       "      <td>1.046289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-12</th>\n",
       "      <td>1.39</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.21</td>\n",
       "      <td>1.37</td>\n",
       "      <td>29665800.0</td>\n",
       "      <td>1.37</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.141667</td>\n",
       "      <td>1.234</td>\n",
       "      <td>1.275333</td>\n",
       "      <td>1.226</td>\n",
       "      <td>1.275333</td>\n",
       "      <td>1.033495</td>\n",
       "      <td>0.993517</td>\n",
       "      <td>1.040239</td>\n",
       "      <td>1.040239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-13</th>\n",
       "      <td>1.37</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.32</td>\n",
       "      <td>8467800.0</td>\n",
       "      <td>1.32</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.036496</td>\n",
       "      <td>1.260</td>\n",
       "      <td>1.267333</td>\n",
       "      <td>1.238</td>\n",
       "      <td>1.267333</td>\n",
       "      <td>1.005820</td>\n",
       "      <td>0.982540</td>\n",
       "      <td>1.023694</td>\n",
       "      <td>1.023694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-14</th>\n",
       "      <td>1.43</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.40</td>\n",
       "      <td>11165700.0</td>\n",
       "      <td>1.40</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.060606</td>\n",
       "      <td>1.298</td>\n",
       "      <td>1.266000</td>\n",
       "      <td>1.252</td>\n",
       "      <td>1.266000</td>\n",
       "      <td>0.975347</td>\n",
       "      <td>0.964561</td>\n",
       "      <td>1.011182</td>\n",
       "      <td>1.011182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-15</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.32</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.35</td>\n",
       "      <td>5736500.0</td>\n",
       "      <td>1.35</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.035714</td>\n",
       "      <td>1.328</td>\n",
       "      <td>1.264000</td>\n",
       "      <td>1.268</td>\n",
       "      <td>1.264000</td>\n",
       "      <td>0.951807</td>\n",
       "      <td>0.954819</td>\n",
       "      <td>0.996845</td>\n",
       "      <td>0.996845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-19</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.38</td>\n",
       "      <td>6454800.0</td>\n",
       "      <td>1.38</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.022222</td>\n",
       "      <td>1.364</td>\n",
       "      <td>1.266000</td>\n",
       "      <td>1.287</td>\n",
       "      <td>1.266000</td>\n",
       "      <td>0.928153</td>\n",
       "      <td>0.943548</td>\n",
       "      <td>0.983683</td>\n",
       "      <td>0.983683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-20</th>\n",
       "      <td>1.56</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.50</td>\n",
       "      <td>13773700.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>1.390</td>\n",
       "      <td>1.280667</td>\n",
       "      <td>1.312</td>\n",
       "      <td>1.280667</td>\n",
       "      <td>0.921343</td>\n",
       "      <td>0.943885</td>\n",
       "      <td>0.976118</td>\n",
       "      <td>0.976118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-21</th>\n",
       "      <td>1.65</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.54</td>\n",
       "      <td>1.61</td>\n",
       "      <td>13021400.0</td>\n",
       "      <td>1.61</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.073333</td>\n",
       "      <td>1.448</td>\n",
       "      <td>1.308000</td>\n",
       "      <td>1.354</td>\n",
       "      <td>1.308000</td>\n",
       "      <td>0.903315</td>\n",
       "      <td>0.935083</td>\n",
       "      <td>0.966027</td>\n",
       "      <td>0.966027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-22</th>\n",
       "      <td>1.81</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.74</td>\n",
       "      <td>17047000.0</td>\n",
       "      <td>1.74</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.080745</td>\n",
       "      <td>1.516</td>\n",
       "      <td>1.340000</td>\n",
       "      <td>1.407</td>\n",
       "      <td>1.340000</td>\n",
       "      <td>0.883905</td>\n",
       "      <td>0.928100</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            High   Low  Open  Close      Volume  Adj Close symbol    return  \\\n",
       "Date                                                                          \n",
       "2020-11-10  1.77  1.71  1.75   1.74   1941900.0       1.74   XSPA -0.016949   \n",
       "2020-11-11  1.86  1.68  1.72   1.79   5307800.0       1.79   XSPA  0.028736   \n",
       "2020-11-12  1.82  1.75  1.80   1.78   2894500.0       1.78   XSPA -0.005587   \n",
       "2020-11-13  1.92  1.80  1.84   1.87   4868400.0       1.87   XSPA  0.050562   \n",
       "2020-11-16  1.91  1.79  1.87   1.85   4374200.0       1.85   XSPA -0.010695   \n",
       "2020-11-17  1.78  1.60  1.60   1.70   4427200.0       1.70   XSPA -0.081081   \n",
       "2020-11-18  1.73  1.66  1.70   1.67   2940600.0       1.67   XSPA -0.017647   \n",
       "2020-11-19  1.66  1.61  1.66   1.64   2773900.0       1.64   XSPA -0.017964   \n",
       "2020-11-20  1.65  1.61  1.64   1.62   2633600.0       1.62   XSPA -0.012195   \n",
       "2020-11-23  1.78  1.61  1.65   1.72   5875300.0       1.72   XSPA  0.061728   \n",
       "2020-11-24  1.74  1.63  1.74   1.65   3718100.0       1.65   XSPA -0.040698   \n",
       "2020-11-25  1.71  1.63  1.67   1.68   2421400.0       1.68   XSPA  0.018182   \n",
       "2020-11-27  1.70  1.66  1.70   1.68   1350200.0       1.68   XSPA  0.000000   \n",
       "2020-11-30  1.69  1.61  1.69   1.64   3157200.0       1.64   XSPA -0.023810   \n",
       "2020-12-01  1.63  1.47  1.61   1.50   5733500.0       1.50   XSPA -0.085366   \n",
       "2020-12-02  1.48  1.42  1.48   1.45   3221100.0       1.45   XSPA -0.033333   \n",
       "2020-12-03  1.47  1.34  1.43   1.43   5388800.0       1.43   XSPA -0.013793   \n",
       "2020-12-04  1.59  1.42  1.46   1.57   6032400.0       1.57   XSPA  0.097902   \n",
       "2020-12-07  1.64  1.55  1.59   1.59   3963200.0       1.59   XSPA  0.012739   \n",
       "2020-12-08  1.60  1.50  1.57   1.52   3069900.0       1.52   XSPA -0.044025   \n",
       "2020-12-09  1.52  1.42  1.51   1.46   3130200.0       1.46   XSPA -0.039474   \n",
       "2020-12-10  1.47  1.41  1.41   1.44   2139200.0       1.44   XSPA -0.013699   \n",
       "2020-12-11  1.49  1.43  1.44   1.45   2041600.0       1.45   XSPA  0.006944   \n",
       "2020-12-14  1.50  1.43  1.48   1.44   2086700.0       1.44   XSPA -0.006897   \n",
       "2020-12-15  1.45  1.39  1.45   1.41   2479400.0       1.41   XSPA -0.020833   \n",
       "2020-12-16  1.45  1.38  1.42   1.45   2514100.0       1.45   XSPA  0.028369   \n",
       "2020-12-17  1.98  1.31  1.78   1.37  73140500.0       1.37   XSPA -0.055172   \n",
       "2020-12-18  1.41  1.33  1.39   1.34  11295200.0       1.34   XSPA -0.021898   \n",
       "2020-12-21  1.44  1.35  1.40   1.44  13684800.0       1.44   XSPA  0.074627   \n",
       "2020-12-22  1.42  1.36  1.42   1.42   7896400.0       1.42   XSPA -0.013889   \n",
       "2020-12-23  1.40  1.36  1.37   1.38   5935200.0       1.38   XSPA -0.028169   \n",
       "2020-12-24  1.39  1.33  1.38   1.35   4801800.0       1.35   XSPA -0.021739   \n",
       "2020-12-28  1.38  1.26  1.38   1.28   9116600.0       1.28   XSPA -0.051852   \n",
       "2020-12-29  1.28  1.15  1.28   1.20  12514800.0       1.20   XSPA -0.062500   \n",
       "2020-12-30  1.28  1.17  1.20   1.26   7901000.0       1.26   XSPA  0.050000   \n",
       "2020-12-31  1.27  1.17  1.27   1.19   6684400.0       1.19   XSPA -0.055556   \n",
       "2021-01-04  1.22  1.15  1.19   1.19   7103800.0       1.19   XSPA  0.000000   \n",
       "2021-01-05  1.36  1.16  1.18   1.25  25332100.0       1.25   XSPA  0.050420   \n",
       "2021-01-06  1.31  1.19  1.26   1.19   7036400.0       1.19   XSPA -0.048000   \n",
       "2021-01-07  1.24  1.20  1.20   1.21   3639300.0       1.21   XSPA  0.016807   \n",
       "2021-01-08  1.25  1.19  1.23   1.20   4610700.0       1.20   XSPA -0.008264   \n",
       "2021-01-11  1.24  1.19  1.20   1.20   4653300.0       1.20   XSPA  0.000000   \n",
       "2021-01-12  1.39  1.20  1.21   1.37  29665800.0       1.37   XSPA  0.141667   \n",
       "2021-01-13  1.37  1.27  1.35   1.32   8467800.0       1.32   XSPA -0.036496   \n",
       "2021-01-14  1.43  1.30  1.33   1.40  11165700.0       1.40   XSPA  0.060606   \n",
       "2021-01-15  1.41  1.32  1.41   1.35   5736500.0       1.35   XSPA -0.035714   \n",
       "2021-01-19  1.41  1.36  1.39   1.38   6454800.0       1.38   XSPA  0.022222   \n",
       "2021-01-20  1.56  1.35  1.42   1.50  13773700.0       1.50   XSPA  0.086957   \n",
       "2021-01-21  1.65  1.43  1.54   1.61  13021400.0       1.61   XSPA  0.073333   \n",
       "2021-01-22  1.81  1.55  1.60   1.74  17047000.0       1.74   XSPA  0.080745   \n",
       "\n",
       "            SMA_5    SMA_15  SMA_10    SMA_20  SMA_ratio  SMA_ratio2  \\\n",
       "Date                                                                   \n",
       "2020-11-10  1.850  1.922000   1.888  1.922000   1.038919    1.020541   \n",
       "2020-11-11  1.830  1.908000   1.866  1.908000   1.042623    1.019672   \n",
       "2020-11-12  1.796  1.893333   1.849  1.893333   1.054195    1.029510   \n",
       "2020-11-13  1.790  1.886667   1.850  1.886667   1.054004    1.033520   \n",
       "2020-11-16  1.806  1.875333   1.848  1.875333   1.038391    1.023256   \n",
       "2020-11-17  1.798  1.858000   1.824  1.858000   1.033370    1.014461   \n",
       "2020-11-18  1.774  1.835333   1.802  1.835333   1.034573    1.015784   \n",
       "2020-11-19  1.746  1.814667   1.771  1.814667   1.039328    1.014318   \n",
       "2020-11-20  1.696  1.798667   1.743  1.798667   1.060535    1.027712   \n",
       "2020-11-23  1.670  1.788667   1.738  1.788667   1.071058    1.040719   \n",
       "2020-11-24  1.660  1.769333   1.729  1.769333   1.065863    1.041566   \n",
       "2020-11-25  1.662  1.755333   1.718  1.755333   1.056157    1.033694   \n",
       "2020-11-27  1.670  1.737333   1.708  1.737333   1.040319    1.022754   \n",
       "2020-11-30  1.674  1.720000   1.685  1.720000   1.027479    1.006571   \n",
       "2020-12-01  1.630  1.702000   1.650  1.702000   1.044172    1.012270   \n",
       "2020-12-02  1.590  1.682667   1.625  1.682667   1.058281    1.022013   \n",
       "2020-12-03  1.540  1.658667   1.601  1.658667   1.077056    1.039610   \n",
       "2020-12-04  1.518  1.644667   1.594  1.644667   1.083443    1.050066   \n",
       "2020-12-07  1.508  1.626000   1.591  1.626000   1.078249    1.055040   \n",
       "2020-12-08  1.512  1.604000   1.571  1.604000   1.060847    1.039021   \n",
       "2020-12-09  1.514  1.588000   1.552  1.588000   1.048877    1.025099   \n",
       "2020-12-10  1.516  1.572667   1.528  1.572667   1.037379    1.007916   \n",
       "2020-12-11  1.492  1.560000   1.505  1.560000   1.045576    1.008713   \n",
       "2020-12-14  1.462  1.548000   1.485  1.548000   1.058824    1.015732   \n",
       "2020-12-15  1.440  1.527333   1.476  1.527333   1.060648    1.025000   \n",
       "2020-12-16  1.438  1.514000   1.476  1.514000   1.052851    1.026426   \n",
       "2020-12-17  1.424  1.493333   1.470  1.493333   1.048689    1.032303   \n",
       "2020-12-18  1.402  1.470667   1.447  1.470667   1.048978    1.032097   \n",
       "2020-12-21  1.402  1.457333   1.432  1.457333   1.039467    1.021398   \n",
       "2020-12-22  1.404  1.452000   1.422  1.452000   1.034188    1.012821   \n",
       "2020-12-23  1.390  1.447333   1.414  1.447333   1.041247    1.017266   \n",
       "2020-12-24  1.386  1.442000   1.405  1.442000   1.040404    1.013709   \n",
       "2020-12-28  1.374  1.422667   1.388  1.422667   1.035420    1.010189   \n",
       "2020-12-29  1.326  1.396667   1.364  1.396667   1.053293    1.028658   \n",
       "2020-12-30  1.294  1.379333   1.349  1.379333   1.065945    1.042504   \n",
       "2020-12-31  1.256  1.361333   1.323  1.361333   1.083864    1.053344   \n",
       "2021-01-04  1.224  1.344667   1.305  1.344667   1.098584    1.066176   \n",
       "2021-01-05  1.218  1.331333   1.296  1.331333   1.093049    1.064039   \n",
       "2021-01-06  1.216  1.314667   1.271  1.314667   1.081140    1.045230   \n",
       "2021-01-07  1.206  1.301333   1.250  1.301333   1.079049    1.036484   \n",
       "2021-01-08  1.208  1.284667   1.232  1.284667   1.063466    1.019868   \n",
       "2021-01-11  1.210  1.273333   1.217  1.273333   1.052342    1.005785   \n",
       "2021-01-12  1.234  1.275333   1.226  1.275333   1.033495    0.993517   \n",
       "2021-01-13  1.260  1.267333   1.238  1.267333   1.005820    0.982540   \n",
       "2021-01-14  1.298  1.266000   1.252  1.266000   0.975347    0.964561   \n",
       "2021-01-15  1.328  1.264000   1.268  1.264000   0.951807    0.954819   \n",
       "2021-01-19  1.364  1.266000   1.287  1.266000   0.928153    0.943548   \n",
       "2021-01-20  1.390  1.280667   1.312  1.280667   0.921343    0.943885   \n",
       "2021-01-21  1.448  1.308000   1.354  1.308000   0.903315    0.935083   \n",
       "2021-01-22  1.516  1.340000   1.407  1.340000   0.883905    0.928100   \n",
       "\n",
       "            SMA_ratio3  SMA_ratio4  \n",
       "Date                                \n",
       "2020-11-10    1.018008    1.018008  \n",
       "2020-11-11    1.022508    1.022508  \n",
       "2020-11-12    1.023977    1.023977  \n",
       "2020-11-13    1.019820    1.019820  \n",
       "2020-11-16    1.014791    1.014791  \n",
       "2020-11-17    1.018640    1.018640  \n",
       "2020-11-18    1.018498    1.018498  \n",
       "2020-11-19    1.024657    1.024657  \n",
       "2020-11-20    1.031937    1.031937  \n",
       "2020-11-23    1.029152    1.029152  \n",
       "2020-11-24    1.023328    1.023328  \n",
       "2020-11-25    1.021731    1.021731  \n",
       "2020-11-27    1.017174    1.017174  \n",
       "2020-11-30    1.020772    1.020772  \n",
       "2020-12-01    1.031515    1.031515  \n",
       "2020-12-02    1.035487    1.035487  \n",
       "2020-12-03    1.036019    1.036019  \n",
       "2020-12-04    1.031786    1.031786  \n",
       "2020-12-07    1.021999    1.021999  \n",
       "2020-12-08    1.021006    1.021006  \n",
       "2020-12-09    1.023196    1.023196  \n",
       "2020-12-10    1.029232    1.029232  \n",
       "2020-12-11    1.036545    1.036545  \n",
       "2020-12-14    1.042424    1.042424  \n",
       "2020-12-15    1.034779    1.034779  \n",
       "2020-12-16    1.025745    1.025745  \n",
       "2020-12-17    1.015873    1.015873  \n",
       "2020-12-18    1.016356    1.016356  \n",
       "2020-12-21    1.017691    1.017691  \n",
       "2020-12-22    1.021097    1.021097  \n",
       "2020-12-23    1.023574    1.023574  \n",
       "2020-12-24    1.026335    1.026335  \n",
       "2020-12-28    1.024976    1.024976  \n",
       "2020-12-29    1.023949    1.023949  \n",
       "2020-12-30    1.022486    1.022486  \n",
       "2020-12-31    1.028975    1.028975  \n",
       "2021-01-04    1.030396    1.030396  \n",
       "2021-01-05    1.027263    1.027263  \n",
       "2021-01-06    1.034356    1.034356  \n",
       "2021-01-07    1.041067    1.041067  \n",
       "2021-01-08    1.042749    1.042749  \n",
       "2021-01-11    1.046289    1.046289  \n",
       "2021-01-12    1.040239    1.040239  \n",
       "2021-01-13    1.023694    1.023694  \n",
       "2021-01-14    1.011182    1.011182  \n",
       "2021-01-15    0.996845    0.996845  \n",
       "2021-01-19    0.983683    0.983683  \n",
       "2021-01-20    0.976118    0.976118  \n",
       "2021-01-21    0.966027    0.966027  \n",
       "2021-01-22    0.952381    0.952381  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data['SMA_5'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.rolling(window = 5).mean())\n",
    "all_data['SMA_15'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.rolling(window = 15).mean())\n",
    "all_data['SMA_10'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.rolling(window = 10).mean())\n",
    "all_data['SMA_20'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.rolling(window = 15).mean())\n",
    "\n",
    "all_data['SMA_ratio'] = all_data['SMA_15'] / all_data['SMA_5']\n",
    "all_data['SMA_ratio2'] = all_data['SMA_10'] / all_data['SMA_5']\n",
    "all_data['SMA_ratio3'] = all_data['SMA_15'] / all_data['SMA_10']\n",
    "all_data['SMA_ratio4'] = all_data['SMA_20'] / all_data['SMA_10']\n",
    "\n",
    "\n",
    "all_data.tail(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting\n",
    "start = dt.datetime.strptime('2020-01-02', '%Y-%m-%d')\n",
    "end = dt.datetime.strptime('2020-12-31', '%Y-%m-%d')\n",
    "sns.set()\n",
    "\n",
    "fig = plt.figure(facecolor = 'white', figsize = (20,10))\n",
    "\n",
    "ax0 = plt.subplot2grid((6,4), (1,0), rowspan=4, colspan=4)\n",
    "ax0.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['Close','SMA_5','SMA_15']])\n",
    "ax0.set_facecolor('ghostwhite')\n",
    "ax0.legend(['Close','SMA_5','SMA_15'],ncol=3, loc = 'upper left', fontsize = 15)\n",
    "plt.title(\"Apple Stock Price, Slow and Fast Moving Average\", fontsize = 20)\n",
    "\n",
    "ax1 = plt.subplot2grid((6,4), (5,0), rowspan=1, colspan=4, sharex = ax0)\n",
    "ax1.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['SMA_ratio']], color = 'purple')\n",
    "ax1.legend(['SMA_Ratio'],ncol=3, loc = 'upper left', fontsize = 12)\n",
    "ax1.set_facecolor('silver')\n",
    "plt.subplots_adjust(left=.09, bottom=.09, right=1, top=.95, wspace=.20, hspace=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>symbol</th>\n",
       "      <th>return</th>\n",
       "      <th>SMA_5</th>\n",
       "      <th>SMA_15</th>\n",
       "      <th>...</th>\n",
       "      <th>SMA_ratio4</th>\n",
       "      <th>SMA5_Volume</th>\n",
       "      <th>SMA15_Volume</th>\n",
       "      <th>SMA10_Volume</th>\n",
       "      <th>SMA20_Volume</th>\n",
       "      <th>SMA_Volume_Ratio</th>\n",
       "      <th>SMA_Volume_Ratio2</th>\n",
       "      <th>SMA_Volume_Ratio3</th>\n",
       "      <th>SMA_Volume_Ratio4</th>\n",
       "      <th>SMA_Volume_Ratio5</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-11-10</th>\n",
       "      <td>1.77</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1941900.0</td>\n",
       "      <td>1.74</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.016949</td>\n",
       "      <td>1.850</td>\n",
       "      <td>1.922000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.018008</td>\n",
       "      <td>2613580.0</td>\n",
       "      <td>2.885133e+06</td>\n",
       "      <td>3045290.0</td>\n",
       "      <td>2847010.0</td>\n",
       "      <td>0.905878</td>\n",
       "      <td>1.055511</td>\n",
       "      <td>0.858237</td>\n",
       "      <td>1.069645</td>\n",
       "      <td>0.918009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-11</th>\n",
       "      <td>1.86</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.72</td>\n",
       "      <td>1.79</td>\n",
       "      <td>5307800.0</td>\n",
       "      <td>1.79</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.028736</td>\n",
       "      <td>1.830</td>\n",
       "      <td>1.908000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.022508</td>\n",
       "      <td>3337000.0</td>\n",
       "      <td>3.055227e+06</td>\n",
       "      <td>2911540.0</td>\n",
       "      <td>2916540.0</td>\n",
       "      <td>1.092227</td>\n",
       "      <td>0.952970</td>\n",
       "      <td>1.146129</td>\n",
       "      <td>0.998286</td>\n",
       "      <td>1.144164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-12</th>\n",
       "      <td>1.82</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2894500.0</td>\n",
       "      <td>1.78</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.005587</td>\n",
       "      <td>1.796</td>\n",
       "      <td>1.893333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.023977</td>\n",
       "      <td>3507860.0</td>\n",
       "      <td>3.060460e+06</td>\n",
       "      <td>2816420.0</td>\n",
       "      <td>2925975.0</td>\n",
       "      <td>1.146187</td>\n",
       "      <td>0.920260</td>\n",
       "      <td>1.245503</td>\n",
       "      <td>0.962558</td>\n",
       "      <td>1.198869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-13</th>\n",
       "      <td>1.92</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.84</td>\n",
       "      <td>1.87</td>\n",
       "      <td>4868400.0</td>\n",
       "      <td>1.87</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.050562</td>\n",
       "      <td>1.790</td>\n",
       "      <td>1.886667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.019820</td>\n",
       "      <td>4207940.0</td>\n",
       "      <td>3.245153e+06</td>\n",
       "      <td>2971940.0</td>\n",
       "      <td>3019560.0</td>\n",
       "      <td>1.296684</td>\n",
       "      <td>0.915809</td>\n",
       "      <td>1.415890</td>\n",
       "      <td>0.984229</td>\n",
       "      <td>1.393561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-16</th>\n",
       "      <td>1.91</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1.87</td>\n",
       "      <td>1.85</td>\n",
       "      <td>4374200.0</td>\n",
       "      <td>1.85</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.010695</td>\n",
       "      <td>1.806</td>\n",
       "      <td>1.875333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.014791</td>\n",
       "      <td>3877360.0</td>\n",
       "      <td>3.320633e+06</td>\n",
       "      <td>3232250.0</td>\n",
       "      <td>3145325.0</td>\n",
       "      <td>1.167657</td>\n",
       "      <td>0.973384</td>\n",
       "      <td>1.199585</td>\n",
       "      <td>1.027636</td>\n",
       "      <td>1.232737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-17</th>\n",
       "      <td>1.78</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.70</td>\n",
       "      <td>4427200.0</td>\n",
       "      <td>1.70</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.081081</td>\n",
       "      <td>1.798</td>\n",
       "      <td>1.858000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.018640</td>\n",
       "      <td>4374420.0</td>\n",
       "      <td>3.488333e+06</td>\n",
       "      <td>3494000.0</td>\n",
       "      <td>3257455.0</td>\n",
       "      <td>1.254014</td>\n",
       "      <td>1.001624</td>\n",
       "      <td>1.251981</td>\n",
       "      <td>1.072617</td>\n",
       "      <td>1.342895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-18</th>\n",
       "      <td>1.73</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.67</td>\n",
       "      <td>2940600.0</td>\n",
       "      <td>1.67</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.017647</td>\n",
       "      <td>1.774</td>\n",
       "      <td>1.835333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.018498</td>\n",
       "      <td>3900980.0</td>\n",
       "      <td>3.241353e+06</td>\n",
       "      <td>3618990.0</td>\n",
       "      <td>3266665.0</td>\n",
       "      <td>1.203503</td>\n",
       "      <td>1.116506</td>\n",
       "      <td>1.077920</td>\n",
       "      <td>1.107855</td>\n",
       "      <td>1.194178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-19</th>\n",
       "      <td>1.66</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.64</td>\n",
       "      <td>2773900.0</td>\n",
       "      <td>1.64</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.017964</td>\n",
       "      <td>1.746</td>\n",
       "      <td>1.814667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.024657</td>\n",
       "      <td>3876860.0</td>\n",
       "      <td>3.169900e+06</td>\n",
       "      <td>3692360.0</td>\n",
       "      <td>3264560.0</td>\n",
       "      <td>1.223023</td>\n",
       "      <td>1.164819</td>\n",
       "      <td>1.049968</td>\n",
       "      <td>1.131044</td>\n",
       "      <td>1.187560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-20</th>\n",
       "      <td>1.65</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.64</td>\n",
       "      <td>1.62</td>\n",
       "      <td>2633600.0</td>\n",
       "      <td>1.62</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.012195</td>\n",
       "      <td>1.696</td>\n",
       "      <td>1.798667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.031937</td>\n",
       "      <td>3429900.0</td>\n",
       "      <td>3.124593e+06</td>\n",
       "      <td>3818920.0</td>\n",
       "      <td>3291340.0</td>\n",
       "      <td>1.097711</td>\n",
       "      <td>1.222213</td>\n",
       "      <td>0.898134</td>\n",
       "      <td>1.160293</td>\n",
       "      <td>1.042098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-23</th>\n",
       "      <td>1.78</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.72</td>\n",
       "      <td>5875300.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.061728</td>\n",
       "      <td>1.670</td>\n",
       "      <td>1.788667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.029152</td>\n",
       "      <td>3730120.0</td>\n",
       "      <td>3.398207e+06</td>\n",
       "      <td>3803740.0</td>\n",
       "      <td>3423005.0</td>\n",
       "      <td>1.097673</td>\n",
       "      <td>1.119337</td>\n",
       "      <td>0.980645</td>\n",
       "      <td>1.111228</td>\n",
       "      <td>1.089721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-24</th>\n",
       "      <td>1.74</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1.65</td>\n",
       "      <td>3718100.0</td>\n",
       "      <td>1.65</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.040698</td>\n",
       "      <td>1.660</td>\n",
       "      <td>1.769333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.023328</td>\n",
       "      <td>3588300.0</td>\n",
       "      <td>3.525433e+06</td>\n",
       "      <td>3981360.0</td>\n",
       "      <td>3513325.0</td>\n",
       "      <td>1.017832</td>\n",
       "      <td>1.129325</td>\n",
       "      <td>0.901275</td>\n",
       "      <td>1.133217</td>\n",
       "      <td>1.021340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-25</th>\n",
       "      <td>1.71</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.68</td>\n",
       "      <td>2421400.0</td>\n",
       "      <td>1.68</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.018182</td>\n",
       "      <td>1.662</td>\n",
       "      <td>1.755333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.021731</td>\n",
       "      <td>3484460.0</td>\n",
       "      <td>3.574147e+06</td>\n",
       "      <td>3692720.0</td>\n",
       "      <td>3302130.0</td>\n",
       "      <td>0.974907</td>\n",
       "      <td>1.033175</td>\n",
       "      <td>0.943603</td>\n",
       "      <td>1.118284</td>\n",
       "      <td>1.055216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-27</th>\n",
       "      <td>1.70</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1350200.0</td>\n",
       "      <td>1.68</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.670</td>\n",
       "      <td>1.737333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.017174</td>\n",
       "      <td>3199720.0</td>\n",
       "      <td>3.528147e+06</td>\n",
       "      <td>3538290.0</td>\n",
       "      <td>3177355.0</td>\n",
       "      <td>0.906912</td>\n",
       "      <td>1.002875</td>\n",
       "      <td>0.904313</td>\n",
       "      <td>1.113596</td>\n",
       "      <td>1.007039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-30</th>\n",
       "      <td>1.69</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.64</td>\n",
       "      <td>3157200.0</td>\n",
       "      <td>1.64</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.023810</td>\n",
       "      <td>1.674</td>\n",
       "      <td>1.720000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.020772</td>\n",
       "      <td>3304440.0</td>\n",
       "      <td>3.647427e+06</td>\n",
       "      <td>3367170.0</td>\n",
       "      <td>3169555.0</td>\n",
       "      <td>0.905965</td>\n",
       "      <td>0.923163</td>\n",
       "      <td>0.981370</td>\n",
       "      <td>1.062348</td>\n",
       "      <td>1.042556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-01</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.50</td>\n",
       "      <td>5733500.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.085366</td>\n",
       "      <td>1.630</td>\n",
       "      <td>1.702000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.031515</td>\n",
       "      <td>3276080.0</td>\n",
       "      <td>3.627853e+06</td>\n",
       "      <td>3503100.0</td>\n",
       "      <td>3367675.0</td>\n",
       "      <td>0.903035</td>\n",
       "      <td>0.965612</td>\n",
       "      <td>0.935195</td>\n",
       "      <td>1.040213</td>\n",
       "      <td>0.972802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-02</th>\n",
       "      <td>1.48</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.45</td>\n",
       "      <td>3221100.0</td>\n",
       "      <td>1.45</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.033333</td>\n",
       "      <td>1.590</td>\n",
       "      <td>1.682667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.035487</td>\n",
       "      <td>3176680.0</td>\n",
       "      <td>3.713133e+06</td>\n",
       "      <td>3382490.0</td>\n",
       "      <td>3438245.0</td>\n",
       "      <td>0.855525</td>\n",
       "      <td>0.910953</td>\n",
       "      <td>0.939154</td>\n",
       "      <td>0.983784</td>\n",
       "      <td>0.923925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-03</th>\n",
       "      <td>1.47</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.43</td>\n",
       "      <td>5388800.0</td>\n",
       "      <td>1.43</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.013793</td>\n",
       "      <td>1.540</td>\n",
       "      <td>1.658667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.036019</td>\n",
       "      <td>3770160.0</td>\n",
       "      <td>3.718533e+06</td>\n",
       "      <td>3627310.0</td>\n",
       "      <td>3623150.0</td>\n",
       "      <td>1.013884</td>\n",
       "      <td>0.975468</td>\n",
       "      <td>1.039382</td>\n",
       "      <td>1.001148</td>\n",
       "      <td>1.040575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-04</th>\n",
       "      <td>1.59</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.46</td>\n",
       "      <td>1.57</td>\n",
       "      <td>6032400.0</td>\n",
       "      <td>1.57</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.097902</td>\n",
       "      <td>1.518</td>\n",
       "      <td>1.644667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.031786</td>\n",
       "      <td>4706600.0</td>\n",
       "      <td>3.927727e+06</td>\n",
       "      <td>3953160.0</td>\n",
       "      <td>3822760.0</td>\n",
       "      <td>1.198301</td>\n",
       "      <td>1.006475</td>\n",
       "      <td>1.190592</td>\n",
       "      <td>1.034111</td>\n",
       "      <td>1.231205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-07</th>\n",
       "      <td>1.64</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.59</td>\n",
       "      <td>3963200.0</td>\n",
       "      <td>1.59</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.012739</td>\n",
       "      <td>1.508</td>\n",
       "      <td>1.626000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.021999</td>\n",
       "      <td>4867800.0</td>\n",
       "      <td>3.867380e+06</td>\n",
       "      <td>4086120.0</td>\n",
       "      <td>3952520.0</td>\n",
       "      <td>1.258682</td>\n",
       "      <td>1.056560</td>\n",
       "      <td>1.191301</td>\n",
       "      <td>1.033801</td>\n",
       "      <td>1.231569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-08</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.52</td>\n",
       "      <td>3069900.0</td>\n",
       "      <td>1.52</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.044025</td>\n",
       "      <td>1.512</td>\n",
       "      <td>1.604000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.021006</td>\n",
       "      <td>4335080.0</td>\n",
       "      <td>3.780427e+06</td>\n",
       "      <td>3805580.0</td>\n",
       "      <td>3804660.0</td>\n",
       "      <td>1.146717</td>\n",
       "      <td>1.006654</td>\n",
       "      <td>1.139138</td>\n",
       "      <td>1.000242</td>\n",
       "      <td>1.139413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-09</th>\n",
       "      <td>1.52</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.51</td>\n",
       "      <td>1.46</td>\n",
       "      <td>3130200.0</td>\n",
       "      <td>1.46</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.039474</td>\n",
       "      <td>1.514</td>\n",
       "      <td>1.588000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.023196</td>\n",
       "      <td>4316900.0</td>\n",
       "      <td>3.693960e+06</td>\n",
       "      <td>3746790.0</td>\n",
       "      <td>3864075.0</td>\n",
       "      <td>1.168637</td>\n",
       "      <td>1.014302</td>\n",
       "      <td>1.152160</td>\n",
       "      <td>0.969647</td>\n",
       "      <td>1.117188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-10</th>\n",
       "      <td>1.47</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.44</td>\n",
       "      <td>2139200.0</td>\n",
       "      <td>1.44</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.013699</td>\n",
       "      <td>1.516</td>\n",
       "      <td>1.572667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.029232</td>\n",
       "      <td>3666980.0</td>\n",
       "      <td>3.640533e+06</td>\n",
       "      <td>3718570.0</td>\n",
       "      <td>3705645.0</td>\n",
       "      <td>1.007265</td>\n",
       "      <td>1.021436</td>\n",
       "      <td>0.986126</td>\n",
       "      <td>1.003488</td>\n",
       "      <td>0.989566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-11</th>\n",
       "      <td>1.49</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.44</td>\n",
       "      <td>1.45</td>\n",
       "      <td>2041600.0</td>\n",
       "      <td>1.45</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.006944</td>\n",
       "      <td>1.492</td>\n",
       "      <td>1.560000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.036545</td>\n",
       "      <td>2868820.0</td>\n",
       "      <td>3.591713e+06</td>\n",
       "      <td>3787710.0</td>\n",
       "      <td>3663000.0</td>\n",
       "      <td>0.798733</td>\n",
       "      <td>1.054569</td>\n",
       "      <td>0.757402</td>\n",
       "      <td>1.034046</td>\n",
       "      <td>0.783189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-14</th>\n",
       "      <td>1.50</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.44</td>\n",
       "      <td>2086700.0</td>\n",
       "      <td>1.44</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.006897</td>\n",
       "      <td>1.462</td>\n",
       "      <td>1.548000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.042424</td>\n",
       "      <td>2493520.0</td>\n",
       "      <td>3.555253e+06</td>\n",
       "      <td>3680660.0</td>\n",
       "      <td>3523915.0</td>\n",
       "      <td>0.701362</td>\n",
       "      <td>1.035274</td>\n",
       "      <td>0.677465</td>\n",
       "      <td>1.044480</td>\n",
       "      <td>0.707599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-15</th>\n",
       "      <td>1.45</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.45</td>\n",
       "      <td>1.41</td>\n",
       "      <td>2479400.0</td>\n",
       "      <td>1.41</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.020833</td>\n",
       "      <td>1.440</td>\n",
       "      <td>1.527333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.034779</td>\n",
       "      <td>2375420.0</td>\n",
       "      <td>3.328860e+06</td>\n",
       "      <td>3355250.0</td>\n",
       "      <td>3429175.0</td>\n",
       "      <td>0.713584</td>\n",
       "      <td>1.007928</td>\n",
       "      <td>0.707971</td>\n",
       "      <td>0.978442</td>\n",
       "      <td>0.692709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-16</th>\n",
       "      <td>1.45</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.45</td>\n",
       "      <td>2514100.0</td>\n",
       "      <td>1.45</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.028369</td>\n",
       "      <td>1.438</td>\n",
       "      <td>1.514000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.025745</td>\n",
       "      <td>2252200.0</td>\n",
       "      <td>3.248593e+06</td>\n",
       "      <td>3284550.0</td>\n",
       "      <td>3333520.0</td>\n",
       "      <td>0.693285</td>\n",
       "      <td>1.011068</td>\n",
       "      <td>0.685695</td>\n",
       "      <td>0.985310</td>\n",
       "      <td>0.675622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-17</th>\n",
       "      <td>1.98</td>\n",
       "      <td>1.31</td>\n",
       "      <td>1.78</td>\n",
       "      <td>1.37</td>\n",
       "      <td>73140500.0</td>\n",
       "      <td>1.37</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.055172</td>\n",
       "      <td>1.424</td>\n",
       "      <td>1.493333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.015873</td>\n",
       "      <td>16452460.0</td>\n",
       "      <td>7.963200e+06</td>\n",
       "      <td>10059720.0</td>\n",
       "      <td>6843515.0</td>\n",
       "      <td>2.066061</td>\n",
       "      <td>1.263276</td>\n",
       "      <td>1.635479</td>\n",
       "      <td>1.469964</td>\n",
       "      <td>2.404095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-18</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.34</td>\n",
       "      <td>11295200.0</td>\n",
       "      <td>1.34</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.021898</td>\n",
       "      <td>1.402</td>\n",
       "      <td>1.470667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.016356</td>\n",
       "      <td>18303180.0</td>\n",
       "      <td>8.626200e+06</td>\n",
       "      <td>10586000.0</td>\n",
       "      <td>7269580.0</td>\n",
       "      <td>2.121813</td>\n",
       "      <td>1.227192</td>\n",
       "      <td>1.728999</td>\n",
       "      <td>1.456205</td>\n",
       "      <td>2.517777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-21</th>\n",
       "      <td>1.44</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.40</td>\n",
       "      <td>1.44</td>\n",
       "      <td>13684800.0</td>\n",
       "      <td>1.44</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.074627</td>\n",
       "      <td>1.402</td>\n",
       "      <td>1.457333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.017691</td>\n",
       "      <td>20622800.0</td>\n",
       "      <td>9.328040e+06</td>\n",
       "      <td>11558160.0</td>\n",
       "      <td>7822140.0</td>\n",
       "      <td>2.210840</td>\n",
       "      <td>1.239077</td>\n",
       "      <td>1.784263</td>\n",
       "      <td>1.477621</td>\n",
       "      <td>2.636465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-22</th>\n",
       "      <td>1.42</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.42</td>\n",
       "      <td>7896400.0</td>\n",
       "      <td>1.42</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.013889</td>\n",
       "      <td>1.404</td>\n",
       "      <td>1.452000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.021097</td>\n",
       "      <td>21706200.0</td>\n",
       "      <td>9.472233e+06</td>\n",
       "      <td>12040810.0</td>\n",
       "      <td>7923195.0</td>\n",
       "      <td>2.291561</td>\n",
       "      <td>1.271169</td>\n",
       "      <td>1.802719</td>\n",
       "      <td>1.519691</td>\n",
       "      <td>2.739577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-23</th>\n",
       "      <td>1.40</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.37</td>\n",
       "      <td>1.38</td>\n",
       "      <td>5935200.0</td>\n",
       "      <td>1.38</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.028169</td>\n",
       "      <td>1.390</td>\n",
       "      <td>1.447333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.023574</td>\n",
       "      <td>22390420.0</td>\n",
       "      <td>9.653173e+06</td>\n",
       "      <td>12321310.0</td>\n",
       "      <td>8034050.0</td>\n",
       "      <td>2.319488</td>\n",
       "      <td>1.276400</td>\n",
       "      <td>1.817211</td>\n",
       "      <td>1.533636</td>\n",
       "      <td>2.786941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-24</th>\n",
       "      <td>1.39</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.35</td>\n",
       "      <td>4801800.0</td>\n",
       "      <td>1.35</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.021739</td>\n",
       "      <td>1.386</td>\n",
       "      <td>1.442000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.026335</td>\n",
       "      <td>8722680.0</td>\n",
       "      <td>9.614040e+06</td>\n",
       "      <td>12587570.0</td>\n",
       "      <td>8153070.0</td>\n",
       "      <td>0.907286</td>\n",
       "      <td>1.309290</td>\n",
       "      <td>0.692960</td>\n",
       "      <td>1.543906</td>\n",
       "      <td>1.069864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-28</th>\n",
       "      <td>1.38</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.28</td>\n",
       "      <td>9116600.0</td>\n",
       "      <td>1.28</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.051852</td>\n",
       "      <td>1.374</td>\n",
       "      <td>1.422667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.024976</td>\n",
       "      <td>8286960.0</td>\n",
       "      <td>9.819653e+06</td>\n",
       "      <td>13295070.0</td>\n",
       "      <td>8541390.0</td>\n",
       "      <td>0.843916</td>\n",
       "      <td>1.353925</td>\n",
       "      <td>0.623311</td>\n",
       "      <td>1.556546</td>\n",
       "      <td>0.970212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29</th>\n",
       "      <td>1.28</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.20</td>\n",
       "      <td>12514800.0</td>\n",
       "      <td>1.20</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.062500</td>\n",
       "      <td>1.326</td>\n",
       "      <td>1.396667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.023949</td>\n",
       "      <td>8052960.0</td>\n",
       "      <td>1.038976e+07</td>\n",
       "      <td>14337880.0</td>\n",
       "      <td>9009270.0</td>\n",
       "      <td>0.775086</td>\n",
       "      <td>1.380001</td>\n",
       "      <td>0.561656</td>\n",
       "      <td>1.591459</td>\n",
       "      <td>0.893853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-30</th>\n",
       "      <td>1.28</td>\n",
       "      <td>1.17</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.26</td>\n",
       "      <td>7901000.0</td>\n",
       "      <td>1.26</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>1.294</td>\n",
       "      <td>1.379333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.022486</td>\n",
       "      <td>8053880.0</td>\n",
       "      <td>1.071183e+07</td>\n",
       "      <td>14880040.0</td>\n",
       "      <td>9117645.0</td>\n",
       "      <td>0.751868</td>\n",
       "      <td>1.389122</td>\n",
       "      <td>0.541254</td>\n",
       "      <td>1.632005</td>\n",
       "      <td>0.883329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-31</th>\n",
       "      <td>1.27</td>\n",
       "      <td>1.17</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.19</td>\n",
       "      <td>6684400.0</td>\n",
       "      <td>1.19</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.055556</td>\n",
       "      <td>1.256</td>\n",
       "      <td>1.361333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.028975</td>\n",
       "      <td>8203720.0</td>\n",
       "      <td>1.094878e+07</td>\n",
       "      <td>15297070.0</td>\n",
       "      <td>9290810.0</td>\n",
       "      <td>0.749282</td>\n",
       "      <td>1.397148</td>\n",
       "      <td>0.536294</td>\n",
       "      <td>1.646473</td>\n",
       "      <td>0.882993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-04</th>\n",
       "      <td>1.22</td>\n",
       "      <td>1.15</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7103800.0</td>\n",
       "      <td>1.19</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.224</td>\n",
       "      <td>1.344667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.030396</td>\n",
       "      <td>8664120.0</td>\n",
       "      <td>1.127975e+07</td>\n",
       "      <td>8693400.0</td>\n",
       "      <td>9376560.0</td>\n",
       "      <td>0.768113</td>\n",
       "      <td>0.770708</td>\n",
       "      <td>0.996632</td>\n",
       "      <td>0.927142</td>\n",
       "      <td>0.924019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>1.36</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.25</td>\n",
       "      <td>25332100.0</td>\n",
       "      <td>1.25</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.050420</td>\n",
       "      <td>1.218</td>\n",
       "      <td>1.331333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.027263</td>\n",
       "      <td>11907220.0</td>\n",
       "      <td>1.283245e+07</td>\n",
       "      <td>10097090.0</td>\n",
       "      <td>10341545.0</td>\n",
       "      <td>0.927899</td>\n",
       "      <td>0.786840</td>\n",
       "      <td>1.179272</td>\n",
       "      <td>0.976362</td>\n",
       "      <td>1.151397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>1.31</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.19</td>\n",
       "      <td>7036400.0</td>\n",
       "      <td>1.19</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.048000</td>\n",
       "      <td>1.216</td>\n",
       "      <td>1.314667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.034356</td>\n",
       "      <td>10811540.0</td>\n",
       "      <td>1.316243e+07</td>\n",
       "      <td>9432250.0</td>\n",
       "      <td>10495205.0</td>\n",
       "      <td>0.821394</td>\n",
       "      <td>0.716604</td>\n",
       "      <td>1.146231</td>\n",
       "      <td>0.898720</td>\n",
       "      <td>1.030141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-07</th>\n",
       "      <td>1.24</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.21</td>\n",
       "      <td>3639300.0</td>\n",
       "      <td>1.21</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.016807</td>\n",
       "      <td>1.206</td>\n",
       "      <td>1.301333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.041067</td>\n",
       "      <td>9959200.0</td>\n",
       "      <td>1.323976e+07</td>\n",
       "      <td>9006540.0</td>\n",
       "      <td>10523675.0</td>\n",
       "      <td>0.752219</td>\n",
       "      <td>0.680265</td>\n",
       "      <td>1.105774</td>\n",
       "      <td>0.855836</td>\n",
       "      <td>0.946361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08</th>\n",
       "      <td>1.25</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.20</td>\n",
       "      <td>4610700.0</td>\n",
       "      <td>1.20</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>1.208</td>\n",
       "      <td>1.284667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.042749</td>\n",
       "      <td>9544460.0</td>\n",
       "      <td>1.337953e+07</td>\n",
       "      <td>8874090.0</td>\n",
       "      <td>10597700.0</td>\n",
       "      <td>0.713363</td>\n",
       "      <td>0.663259</td>\n",
       "      <td>1.075542</td>\n",
       "      <td>0.837360</td>\n",
       "      <td>0.900616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-11</th>\n",
       "      <td>1.24</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.20</td>\n",
       "      <td>4653300.0</td>\n",
       "      <td>1.20</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.210</td>\n",
       "      <td>1.273333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.046289</td>\n",
       "      <td>9054360.0</td>\n",
       "      <td>8.813720e+06</td>\n",
       "      <td>8859240.0</td>\n",
       "      <td>10723405.0</td>\n",
       "      <td>1.027303</td>\n",
       "      <td>1.005165</td>\n",
       "      <td>1.022024</td>\n",
       "      <td>0.826159</td>\n",
       "      <td>0.844355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-12</th>\n",
       "      <td>1.39</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.21</td>\n",
       "      <td>1.37</td>\n",
       "      <td>29665800.0</td>\n",
       "      <td>1.37</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.141667</td>\n",
       "      <td>1.234</td>\n",
       "      <td>1.275333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.040239</td>\n",
       "      <td>9921100.0</td>\n",
       "      <td>1.003843e+07</td>\n",
       "      <td>10914160.0</td>\n",
       "      <td>12104615.0</td>\n",
       "      <td>0.988312</td>\n",
       "      <td>1.087238</td>\n",
       "      <td>0.909012</td>\n",
       "      <td>0.901653</td>\n",
       "      <td>0.819613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-13</th>\n",
       "      <td>1.37</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.32</td>\n",
       "      <td>8467800.0</td>\n",
       "      <td>1.32</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.036496</td>\n",
       "      <td>1.260</td>\n",
       "      <td>1.267333</td>\n",
       "      <td>...</td>\n",
       "      <td>1.023694</td>\n",
       "      <td>10207380.0</td>\n",
       "      <td>9.690627e+06</td>\n",
       "      <td>10509460.0</td>\n",
       "      <td>12423670.0</td>\n",
       "      <td>1.053325</td>\n",
       "      <td>1.084497</td>\n",
       "      <td>0.971256</td>\n",
       "      <td>0.845922</td>\n",
       "      <td>0.821607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-14</th>\n",
       "      <td>1.43</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.40</td>\n",
       "      <td>11165700.0</td>\n",
       "      <td>1.40</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.060606</td>\n",
       "      <td>1.298</td>\n",
       "      <td>1.266000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.011182</td>\n",
       "      <td>11712660.0</td>\n",
       "      <td>9.908580e+06</td>\n",
       "      <td>10835930.0</td>\n",
       "      <td>12857985.0</td>\n",
       "      <td>1.182073</td>\n",
       "      <td>1.093591</td>\n",
       "      <td>1.080910</td>\n",
       "      <td>0.842739</td>\n",
       "      <td>0.910925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-15</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.32</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.35</td>\n",
       "      <td>5736500.0</td>\n",
       "      <td>1.35</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>-0.035714</td>\n",
       "      <td>1.328</td>\n",
       "      <td>1.264000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.996845</td>\n",
       "      <td>11937820.0</td>\n",
       "      <td>9.895333e+06</td>\n",
       "      <td>10741140.0</td>\n",
       "      <td>13019105.0</td>\n",
       "      <td>1.206409</td>\n",
       "      <td>1.085475</td>\n",
       "      <td>1.111411</td>\n",
       "      <td>0.825029</td>\n",
       "      <td>0.916946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-19</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.38</td>\n",
       "      <td>6454800.0</td>\n",
       "      <td>1.38</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.022222</td>\n",
       "      <td>1.364</td>\n",
       "      <td>1.266000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.983683</td>\n",
       "      <td>12298120.0</td>\n",
       "      <td>1.000553e+07</td>\n",
       "      <td>10676240.0</td>\n",
       "      <td>9684820.0</td>\n",
       "      <td>1.229132</td>\n",
       "      <td>1.067034</td>\n",
       "      <td>1.151915</td>\n",
       "      <td>1.102368</td>\n",
       "      <td>1.269835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-20</th>\n",
       "      <td>1.56</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.50</td>\n",
       "      <td>13773700.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>1.390</td>\n",
       "      <td>1.280667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.976118</td>\n",
       "      <td>9119700.0</td>\n",
       "      <td>1.031601e+07</td>\n",
       "      <td>9520400.0</td>\n",
       "      <td>9808745.0</td>\n",
       "      <td>0.884034</td>\n",
       "      <td>0.922876</td>\n",
       "      <td>0.957911</td>\n",
       "      <td>0.970603</td>\n",
       "      <td>0.929752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-21</th>\n",
       "      <td>1.65</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.54</td>\n",
       "      <td>1.61</td>\n",
       "      <td>13021400.0</td>\n",
       "      <td>1.61</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.073333</td>\n",
       "      <td>1.448</td>\n",
       "      <td>1.308000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.966027</td>\n",
       "      <td>10030420.0</td>\n",
       "      <td>1.034978e+07</td>\n",
       "      <td>10118900.0</td>\n",
       "      <td>9775575.0</td>\n",
       "      <td>0.969143</td>\n",
       "      <td>0.977692</td>\n",
       "      <td>0.991256</td>\n",
       "      <td>1.035121</td>\n",
       "      <td>1.026070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-22</th>\n",
       "      <td>1.81</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.74</td>\n",
       "      <td>17047000.0</td>\n",
       "      <td>1.74</td>\n",
       "      <td>XSPA</td>\n",
       "      <td>0.080745</td>\n",
       "      <td>1.516</td>\n",
       "      <td>1.340000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>11206680.0</td>\n",
       "      <td>1.095951e+07</td>\n",
       "      <td>11459670.0</td>\n",
       "      <td>10233105.0</td>\n",
       "      <td>1.022553</td>\n",
       "      <td>1.045637</td>\n",
       "      <td>0.977923</td>\n",
       "      <td>1.119862</td>\n",
       "      <td>1.095140</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            High   Low  Open  Close      Volume  Adj Close symbol    return  \\\n",
       "Date                                                                          \n",
       "2020-11-10  1.77  1.71  1.75   1.74   1941900.0       1.74   XSPA -0.016949   \n",
       "2020-11-11  1.86  1.68  1.72   1.79   5307800.0       1.79   XSPA  0.028736   \n",
       "2020-11-12  1.82  1.75  1.80   1.78   2894500.0       1.78   XSPA -0.005587   \n",
       "2020-11-13  1.92  1.80  1.84   1.87   4868400.0       1.87   XSPA  0.050562   \n",
       "2020-11-16  1.91  1.79  1.87   1.85   4374200.0       1.85   XSPA -0.010695   \n",
       "2020-11-17  1.78  1.60  1.60   1.70   4427200.0       1.70   XSPA -0.081081   \n",
       "2020-11-18  1.73  1.66  1.70   1.67   2940600.0       1.67   XSPA -0.017647   \n",
       "2020-11-19  1.66  1.61  1.66   1.64   2773900.0       1.64   XSPA -0.017964   \n",
       "2020-11-20  1.65  1.61  1.64   1.62   2633600.0       1.62   XSPA -0.012195   \n",
       "2020-11-23  1.78  1.61  1.65   1.72   5875300.0       1.72   XSPA  0.061728   \n",
       "2020-11-24  1.74  1.63  1.74   1.65   3718100.0       1.65   XSPA -0.040698   \n",
       "2020-11-25  1.71  1.63  1.67   1.68   2421400.0       1.68   XSPA  0.018182   \n",
       "2020-11-27  1.70  1.66  1.70   1.68   1350200.0       1.68   XSPA  0.000000   \n",
       "2020-11-30  1.69  1.61  1.69   1.64   3157200.0       1.64   XSPA -0.023810   \n",
       "2020-12-01  1.63  1.47  1.61   1.50   5733500.0       1.50   XSPA -0.085366   \n",
       "2020-12-02  1.48  1.42  1.48   1.45   3221100.0       1.45   XSPA -0.033333   \n",
       "2020-12-03  1.47  1.34  1.43   1.43   5388800.0       1.43   XSPA -0.013793   \n",
       "2020-12-04  1.59  1.42  1.46   1.57   6032400.0       1.57   XSPA  0.097902   \n",
       "2020-12-07  1.64  1.55  1.59   1.59   3963200.0       1.59   XSPA  0.012739   \n",
       "2020-12-08  1.60  1.50  1.57   1.52   3069900.0       1.52   XSPA -0.044025   \n",
       "2020-12-09  1.52  1.42  1.51   1.46   3130200.0       1.46   XSPA -0.039474   \n",
       "2020-12-10  1.47  1.41  1.41   1.44   2139200.0       1.44   XSPA -0.013699   \n",
       "2020-12-11  1.49  1.43  1.44   1.45   2041600.0       1.45   XSPA  0.006944   \n",
       "2020-12-14  1.50  1.43  1.48   1.44   2086700.0       1.44   XSPA -0.006897   \n",
       "2020-12-15  1.45  1.39  1.45   1.41   2479400.0       1.41   XSPA -0.020833   \n",
       "2020-12-16  1.45  1.38  1.42   1.45   2514100.0       1.45   XSPA  0.028369   \n",
       "2020-12-17  1.98  1.31  1.78   1.37  73140500.0       1.37   XSPA -0.055172   \n",
       "2020-12-18  1.41  1.33  1.39   1.34  11295200.0       1.34   XSPA -0.021898   \n",
       "2020-12-21  1.44  1.35  1.40   1.44  13684800.0       1.44   XSPA  0.074627   \n",
       "2020-12-22  1.42  1.36  1.42   1.42   7896400.0       1.42   XSPA -0.013889   \n",
       "2020-12-23  1.40  1.36  1.37   1.38   5935200.0       1.38   XSPA -0.028169   \n",
       "2020-12-24  1.39  1.33  1.38   1.35   4801800.0       1.35   XSPA -0.021739   \n",
       "2020-12-28  1.38  1.26  1.38   1.28   9116600.0       1.28   XSPA -0.051852   \n",
       "2020-12-29  1.28  1.15  1.28   1.20  12514800.0       1.20   XSPA -0.062500   \n",
       "2020-12-30  1.28  1.17  1.20   1.26   7901000.0       1.26   XSPA  0.050000   \n",
       "2020-12-31  1.27  1.17  1.27   1.19   6684400.0       1.19   XSPA -0.055556   \n",
       "2021-01-04  1.22  1.15  1.19   1.19   7103800.0       1.19   XSPA  0.000000   \n",
       "2021-01-05  1.36  1.16  1.18   1.25  25332100.0       1.25   XSPA  0.050420   \n",
       "2021-01-06  1.31  1.19  1.26   1.19   7036400.0       1.19   XSPA -0.048000   \n",
       "2021-01-07  1.24  1.20  1.20   1.21   3639300.0       1.21   XSPA  0.016807   \n",
       "2021-01-08  1.25  1.19  1.23   1.20   4610700.0       1.20   XSPA -0.008264   \n",
       "2021-01-11  1.24  1.19  1.20   1.20   4653300.0       1.20   XSPA  0.000000   \n",
       "2021-01-12  1.39  1.20  1.21   1.37  29665800.0       1.37   XSPA  0.141667   \n",
       "2021-01-13  1.37  1.27  1.35   1.32   8467800.0       1.32   XSPA -0.036496   \n",
       "2021-01-14  1.43  1.30  1.33   1.40  11165700.0       1.40   XSPA  0.060606   \n",
       "2021-01-15  1.41  1.32  1.41   1.35   5736500.0       1.35   XSPA -0.035714   \n",
       "2021-01-19  1.41  1.36  1.39   1.38   6454800.0       1.38   XSPA  0.022222   \n",
       "2021-01-20  1.56  1.35  1.42   1.50  13773700.0       1.50   XSPA  0.086957   \n",
       "2021-01-21  1.65  1.43  1.54   1.61  13021400.0       1.61   XSPA  0.073333   \n",
       "2021-01-22  1.81  1.55  1.60   1.74  17047000.0       1.74   XSPA  0.080745   \n",
       "\n",
       "            SMA_5    SMA_15  ...  SMA_ratio4  SMA5_Volume  SMA15_Volume  \\\n",
       "Date                         ...                                          \n",
       "2020-11-10  1.850  1.922000  ...    1.018008    2613580.0  2.885133e+06   \n",
       "2020-11-11  1.830  1.908000  ...    1.022508    3337000.0  3.055227e+06   \n",
       "2020-11-12  1.796  1.893333  ...    1.023977    3507860.0  3.060460e+06   \n",
       "2020-11-13  1.790  1.886667  ...    1.019820    4207940.0  3.245153e+06   \n",
       "2020-11-16  1.806  1.875333  ...    1.014791    3877360.0  3.320633e+06   \n",
       "2020-11-17  1.798  1.858000  ...    1.018640    4374420.0  3.488333e+06   \n",
       "2020-11-18  1.774  1.835333  ...    1.018498    3900980.0  3.241353e+06   \n",
       "2020-11-19  1.746  1.814667  ...    1.024657    3876860.0  3.169900e+06   \n",
       "2020-11-20  1.696  1.798667  ...    1.031937    3429900.0  3.124593e+06   \n",
       "2020-11-23  1.670  1.788667  ...    1.029152    3730120.0  3.398207e+06   \n",
       "2020-11-24  1.660  1.769333  ...    1.023328    3588300.0  3.525433e+06   \n",
       "2020-11-25  1.662  1.755333  ...    1.021731    3484460.0  3.574147e+06   \n",
       "2020-11-27  1.670  1.737333  ...    1.017174    3199720.0  3.528147e+06   \n",
       "2020-11-30  1.674  1.720000  ...    1.020772    3304440.0  3.647427e+06   \n",
       "2020-12-01  1.630  1.702000  ...    1.031515    3276080.0  3.627853e+06   \n",
       "2020-12-02  1.590  1.682667  ...    1.035487    3176680.0  3.713133e+06   \n",
       "2020-12-03  1.540  1.658667  ...    1.036019    3770160.0  3.718533e+06   \n",
       "2020-12-04  1.518  1.644667  ...    1.031786    4706600.0  3.927727e+06   \n",
       "2020-12-07  1.508  1.626000  ...    1.021999    4867800.0  3.867380e+06   \n",
       "2020-12-08  1.512  1.604000  ...    1.021006    4335080.0  3.780427e+06   \n",
       "2020-12-09  1.514  1.588000  ...    1.023196    4316900.0  3.693960e+06   \n",
       "2020-12-10  1.516  1.572667  ...    1.029232    3666980.0  3.640533e+06   \n",
       "2020-12-11  1.492  1.560000  ...    1.036545    2868820.0  3.591713e+06   \n",
       "2020-12-14  1.462  1.548000  ...    1.042424    2493520.0  3.555253e+06   \n",
       "2020-12-15  1.440  1.527333  ...    1.034779    2375420.0  3.328860e+06   \n",
       "2020-12-16  1.438  1.514000  ...    1.025745    2252200.0  3.248593e+06   \n",
       "2020-12-17  1.424  1.493333  ...    1.015873   16452460.0  7.963200e+06   \n",
       "2020-12-18  1.402  1.470667  ...    1.016356   18303180.0  8.626200e+06   \n",
       "2020-12-21  1.402  1.457333  ...    1.017691   20622800.0  9.328040e+06   \n",
       "2020-12-22  1.404  1.452000  ...    1.021097   21706200.0  9.472233e+06   \n",
       "2020-12-23  1.390  1.447333  ...    1.023574   22390420.0  9.653173e+06   \n",
       "2020-12-24  1.386  1.442000  ...    1.026335    8722680.0  9.614040e+06   \n",
       "2020-12-28  1.374  1.422667  ...    1.024976    8286960.0  9.819653e+06   \n",
       "2020-12-29  1.326  1.396667  ...    1.023949    8052960.0  1.038976e+07   \n",
       "2020-12-30  1.294  1.379333  ...    1.022486    8053880.0  1.071183e+07   \n",
       "2020-12-31  1.256  1.361333  ...    1.028975    8203720.0  1.094878e+07   \n",
       "2021-01-04  1.224  1.344667  ...    1.030396    8664120.0  1.127975e+07   \n",
       "2021-01-05  1.218  1.331333  ...    1.027263   11907220.0  1.283245e+07   \n",
       "2021-01-06  1.216  1.314667  ...    1.034356   10811540.0  1.316243e+07   \n",
       "2021-01-07  1.206  1.301333  ...    1.041067    9959200.0  1.323976e+07   \n",
       "2021-01-08  1.208  1.284667  ...    1.042749    9544460.0  1.337953e+07   \n",
       "2021-01-11  1.210  1.273333  ...    1.046289    9054360.0  8.813720e+06   \n",
       "2021-01-12  1.234  1.275333  ...    1.040239    9921100.0  1.003843e+07   \n",
       "2021-01-13  1.260  1.267333  ...    1.023694   10207380.0  9.690627e+06   \n",
       "2021-01-14  1.298  1.266000  ...    1.011182   11712660.0  9.908580e+06   \n",
       "2021-01-15  1.328  1.264000  ...    0.996845   11937820.0  9.895333e+06   \n",
       "2021-01-19  1.364  1.266000  ...    0.983683   12298120.0  1.000553e+07   \n",
       "2021-01-20  1.390  1.280667  ...    0.976118    9119700.0  1.031601e+07   \n",
       "2021-01-21  1.448  1.308000  ...    0.966027   10030420.0  1.034978e+07   \n",
       "2021-01-22  1.516  1.340000  ...    0.952381   11206680.0  1.095951e+07   \n",
       "\n",
       "            SMA10_Volume  SMA20_Volume  SMA_Volume_Ratio  SMA_Volume_Ratio2  \\\n",
       "Date                                                                          \n",
       "2020-11-10     3045290.0     2847010.0          0.905878           1.055511   \n",
       "2020-11-11     2911540.0     2916540.0          1.092227           0.952970   \n",
       "2020-11-12     2816420.0     2925975.0          1.146187           0.920260   \n",
       "2020-11-13     2971940.0     3019560.0          1.296684           0.915809   \n",
       "2020-11-16     3232250.0     3145325.0          1.167657           0.973384   \n",
       "2020-11-17     3494000.0     3257455.0          1.254014           1.001624   \n",
       "2020-11-18     3618990.0     3266665.0          1.203503           1.116506   \n",
       "2020-11-19     3692360.0     3264560.0          1.223023           1.164819   \n",
       "2020-11-20     3818920.0     3291340.0          1.097711           1.222213   \n",
       "2020-11-23     3803740.0     3423005.0          1.097673           1.119337   \n",
       "2020-11-24     3981360.0     3513325.0          1.017832           1.129325   \n",
       "2020-11-25     3692720.0     3302130.0          0.974907           1.033175   \n",
       "2020-11-27     3538290.0     3177355.0          0.906912           1.002875   \n",
       "2020-11-30     3367170.0     3169555.0          0.905965           0.923163   \n",
       "2020-12-01     3503100.0     3367675.0          0.903035           0.965612   \n",
       "2020-12-02     3382490.0     3438245.0          0.855525           0.910953   \n",
       "2020-12-03     3627310.0     3623150.0          1.013884           0.975468   \n",
       "2020-12-04     3953160.0     3822760.0          1.198301           1.006475   \n",
       "2020-12-07     4086120.0     3952520.0          1.258682           1.056560   \n",
       "2020-12-08     3805580.0     3804660.0          1.146717           1.006654   \n",
       "2020-12-09     3746790.0     3864075.0          1.168637           1.014302   \n",
       "2020-12-10     3718570.0     3705645.0          1.007265           1.021436   \n",
       "2020-12-11     3787710.0     3663000.0          0.798733           1.054569   \n",
       "2020-12-14     3680660.0     3523915.0          0.701362           1.035274   \n",
       "2020-12-15     3355250.0     3429175.0          0.713584           1.007928   \n",
       "2020-12-16     3284550.0     3333520.0          0.693285           1.011068   \n",
       "2020-12-17    10059720.0     6843515.0          2.066061           1.263276   \n",
       "2020-12-18    10586000.0     7269580.0          2.121813           1.227192   \n",
       "2020-12-21    11558160.0     7822140.0          2.210840           1.239077   \n",
       "2020-12-22    12040810.0     7923195.0          2.291561           1.271169   \n",
       "2020-12-23    12321310.0     8034050.0          2.319488           1.276400   \n",
       "2020-12-24    12587570.0     8153070.0          0.907286           1.309290   \n",
       "2020-12-28    13295070.0     8541390.0          0.843916           1.353925   \n",
       "2020-12-29    14337880.0     9009270.0          0.775086           1.380001   \n",
       "2020-12-30    14880040.0     9117645.0          0.751868           1.389122   \n",
       "2020-12-31    15297070.0     9290810.0          0.749282           1.397148   \n",
       "2021-01-04     8693400.0     9376560.0          0.768113           0.770708   \n",
       "2021-01-05    10097090.0    10341545.0          0.927899           0.786840   \n",
       "2021-01-06     9432250.0    10495205.0          0.821394           0.716604   \n",
       "2021-01-07     9006540.0    10523675.0          0.752219           0.680265   \n",
       "2021-01-08     8874090.0    10597700.0          0.713363           0.663259   \n",
       "2021-01-11     8859240.0    10723405.0          1.027303           1.005165   \n",
       "2021-01-12    10914160.0    12104615.0          0.988312           1.087238   \n",
       "2021-01-13    10509460.0    12423670.0          1.053325           1.084497   \n",
       "2021-01-14    10835930.0    12857985.0          1.182073           1.093591   \n",
       "2021-01-15    10741140.0    13019105.0          1.206409           1.085475   \n",
       "2021-01-19    10676240.0     9684820.0          1.229132           1.067034   \n",
       "2021-01-20     9520400.0     9808745.0          0.884034           0.922876   \n",
       "2021-01-21    10118900.0     9775575.0          0.969143           0.977692   \n",
       "2021-01-22    11459670.0    10233105.0          1.022553           1.045637   \n",
       "\n",
       "            SMA_Volume_Ratio3  SMA_Volume_Ratio4  SMA_Volume_Ratio5  \n",
       "Date                                                                 \n",
       "2020-11-10           0.858237           1.069645           0.918009  \n",
       "2020-11-11           1.146129           0.998286           1.144164  \n",
       "2020-11-12           1.245503           0.962558           1.198869  \n",
       "2020-11-13           1.415890           0.984229           1.393561  \n",
       "2020-11-16           1.199585           1.027636           1.232737  \n",
       "2020-11-17           1.251981           1.072617           1.342895  \n",
       "2020-11-18           1.077920           1.107855           1.194178  \n",
       "2020-11-19           1.049968           1.131044           1.187560  \n",
       "2020-11-20           0.898134           1.160293           1.042098  \n",
       "2020-11-23           0.980645           1.111228           1.089721  \n",
       "2020-11-24           0.901275           1.133217           1.021340  \n",
       "2020-11-25           0.943603           1.118284           1.055216  \n",
       "2020-11-27           0.904313           1.113596           1.007039  \n",
       "2020-11-30           0.981370           1.062348           1.042556  \n",
       "2020-12-01           0.935195           1.040213           0.972802  \n",
       "2020-12-02           0.939154           0.983784           0.923925  \n",
       "2020-12-03           1.039382           1.001148           1.040575  \n",
       "2020-12-04           1.190592           1.034111           1.231205  \n",
       "2020-12-07           1.191301           1.033801           1.231569  \n",
       "2020-12-08           1.139138           1.000242           1.139413  \n",
       "2020-12-09           1.152160           0.969647           1.117188  \n",
       "2020-12-10           0.986126           1.003488           0.989566  \n",
       "2020-12-11           0.757402           1.034046           0.783189  \n",
       "2020-12-14           0.677465           1.044480           0.707599  \n",
       "2020-12-15           0.707971           0.978442           0.692709  \n",
       "2020-12-16           0.685695           0.985310           0.675622  \n",
       "2020-12-17           1.635479           1.469964           2.404095  \n",
       "2020-12-18           1.728999           1.456205           2.517777  \n",
       "2020-12-21           1.784263           1.477621           2.636465  \n",
       "2020-12-22           1.802719           1.519691           2.739577  \n",
       "2020-12-23           1.817211           1.533636           2.786941  \n",
       "2020-12-24           0.692960           1.543906           1.069864  \n",
       "2020-12-28           0.623311           1.556546           0.970212  \n",
       "2020-12-29           0.561656           1.591459           0.893853  \n",
       "2020-12-30           0.541254           1.632005           0.883329  \n",
       "2020-12-31           0.536294           1.646473           0.882993  \n",
       "2021-01-04           0.996632           0.927142           0.924019  \n",
       "2021-01-05           1.179272           0.976362           1.151397  \n",
       "2021-01-06           1.146231           0.898720           1.030141  \n",
       "2021-01-07           1.105774           0.855836           0.946361  \n",
       "2021-01-08           1.075542           0.837360           0.900616  \n",
       "2021-01-11           1.022024           0.826159           0.844355  \n",
       "2021-01-12           0.909012           0.901653           0.819613  \n",
       "2021-01-13           0.971256           0.845922           0.821607  \n",
       "2021-01-14           1.080910           0.842739           0.910925  \n",
       "2021-01-15           1.111411           0.825029           0.916946  \n",
       "2021-01-19           1.151915           1.102368           1.269835  \n",
       "2021-01-20           0.957911           0.970603           0.929752  \n",
       "2021-01-21           0.991256           1.035121           1.026070  \n",
       "2021-01-22           0.977923           1.119862           1.095140  \n",
       "\n",
       "[50 rows x 25 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Simple moving average of VOLUME\n",
    "all_data['SMA5_Volume'] = all_data.groupby('symbol')['Volume'].transform(lambda x: x.rolling(window = 5).mean())\n",
    "all_data['SMA15_Volume'] = all_data.groupby('symbol')['Volume'].transform(lambda x: x.rolling(window = 15).mean())\n",
    "all_data['SMA10_Volume'] = all_data.groupby('symbol')['Volume'].transform(lambda x: x.rolling(window = 10).mean())\n",
    "all_data['SMA20_Volume'] = all_data.groupby('symbol')['Volume'].transform(lambda x: x.rolling(window = 20).mean())\n",
    "\n",
    "all_data['SMA_Volume_Ratio'] = all_data['SMA5_Volume']/all_data['SMA15_Volume']\n",
    "all_data['SMA_Volume_Ratio2'] = all_data['SMA10_Volume']/all_data['SMA15_Volume']\n",
    "all_data['SMA_Volume_Ratio3'] = all_data['SMA5_Volume']/all_data['SMA10_Volume']\n",
    "all_data['SMA_Volume_Ratio4'] = all_data['SMA10_Volume']/all_data['SMA20_Volume']\n",
    "all_data['SMA_Volume_Ratio5'] = all_data['SMA5_Volume']/all_data['SMA20_Volume']\n",
    "\n",
    "\n",
    "\n",
    "all_data.tail(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Smoothing with Wilder puts emphasis on recent values\n",
    "def Wilder(data, periods):\n",
    "    start = np.where(~np.isnan(data))[0][0] #Check if nans present in beginning\n",
    "    Wilder = np.array([np.nan]*len(data))\n",
    "    Wilder[start+periods-1] = data[start:(start+periods)].mean() #Simple Moving Average\n",
    "    for i in range(start+periods,len(data)):\n",
    "        Wilder[i] = (Wilder[i-1]*(periods-1) + data[i])/periods #Wilder Smoothing\n",
    "    return(Wilder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ATR ratio is used to figure out a true range, for volatility\n",
    "all_data['prev_close'] = all_data.groupby('symbol')['Close'].shift(1)\n",
    "all_data['TR'] = np.maximum((all_data['High'] - all_data['Low']), \n",
    "                     np.maximum(abs(all_data['High'] - all_data['prev_close']), \n",
    "                     abs(all_data['prev_close'] - all_data['Low'])))\n",
    "for i in all_data['symbol'].unique():\n",
    "    TR_data = all_data[all_data.symbol == i].copy()\n",
    "    all_data.loc[all_data.symbol==i,'ATR_5'] = Wilder(TR_data['TR'], 5)\n",
    "    all_data.loc[all_data.symbol==i,'ATR_15'] = Wilder(TR_data['TR'], 15)\n",
    "    all_data.loc[all_data.symbol==i,'ATR_10'] = Wilder(TR_data['TR'], 10)\n",
    "\n",
    "all_data['ATR_Ratio'] = all_data['ATR_5'] / all_data['ATR_15']\n",
    "all_data['ATR_Ratio2'] = all_data['ATR_5'] / all_data['ATR_10']\n",
    "all_data['ATR_Ratio3'] = all_data['ATR_10'] / all_data['ATR_15']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['prev_high'] = all_data.groupby('symbol')['High'].shift(1)\n",
    "all_data['prev_low'] = all_data.groupby('symbol')['Low'].shift(1)\n",
    "\n",
    "all_data['+DM'] = np.where(~np.isnan(all_data.prev_high),\n",
    "                           np.where((all_data['High'] > all_data['prev_high']) & \n",
    "         (((all_data['High'] - all_data['prev_high']) > (all_data['prev_low'] - all_data['Low']))), \n",
    "                                                                  all_data['High'] - all_data['prev_high'], \n",
    "                                                                  0),np.nan)\n",
    "\n",
    "all_data['-DM'] = np.where(~np.isnan(all_data.prev_low),\n",
    "                           np.where((all_data['prev_low'] > all_data['Low']) & \n",
    "         (((all_data['prev_low'] - all_data['Low']) > (all_data['High'] - all_data['prev_high']))), \n",
    "                                    all_data['prev_low'] - all_data['Low'], \n",
    "                                    0),np.nan)\n",
    "\n",
    "for i in all_data['symbol'].unique():\n",
    "    ADX_data = all_data[all_data.symbol == i].copy()\n",
    "    all_data.loc[all_data.symbol==i,'+DM_5'] = Wilder(ADX_data['+DM'], 5)\n",
    "    all_data.loc[all_data.symbol==i,'-DM_5'] = Wilder(ADX_data['-DM'], 5)\n",
    "    all_data.loc[all_data.symbol==i,'+DM_15'] = Wilder(ADX_data['+DM'], 15)\n",
    "    all_data.loc[all_data.symbol==i,'-DM_15'] = Wilder(ADX_data['-DM'], 15)\n",
    "    all_data.loc[all_data.symbol==i,'-DM_10'] = Wilder(ADX_data['-DM'], 10)\n",
    "    all_data.loc[all_data.symbol==i,'+DM_10'] = Wilder(ADX_data['+DM'], 10)\n",
    "\n",
    "\n",
    "all_data['+DI_5'] = (all_data['+DM_5']/all_data['ATR_5'])*100\n",
    "all_data['-DI_5'] = (all_data['-DM_5']/all_data['ATR_5'])*100\n",
    "all_data['+DI_15'] = (all_data['+DM_15']/all_data['ATR_15'])*100\n",
    "all_data['-DI_15'] = (all_data['-DM_15']/all_data['ATR_15'])*100\n",
    "all_data['-DI_10'] = (all_data['-DM_10']/all_data['ATR_10'])*100\n",
    "all_data['+DI_10'] = (all_data['+DM_10']/all_data['ATR_10'])*100\n",
    "\n",
    "\n",
    "\n",
    "all_data['DX_5'] = (np.round(abs(all_data['+DI_5'] - all_data['-DI_5'])/(all_data['+DI_5'] + all_data['-DI_5']) * 100))\n",
    "all_data['DX_10'] = (np.round(abs(all_data['+DI_10'] - all_data['-DI_10'])/(all_data['+DI_10'] + all_data['-DI_10']) * 100))\n",
    "all_data['DX_15'] = (np.round(abs(all_data['+DI_15'] - all_data['-DI_15'])/(all_data['+DI_15'] + all_data['-DI_15']) * 100))\n",
    "\n",
    "for i in all_data['symbol'].unique():\n",
    "    ADX_data = all_data[all_data.symbol == i].copy()\n",
    "    all_data.loc[all_data.symbol==i,'ADX_5'] = Wilder(ADX_data['DX_5'], 5)\n",
    "    all_data.loc[all_data.symbol==i,'ADX_15'] = Wilder(ADX_data['DX_15'], 15)\n",
    "    all_data.loc[all_data.symbol==i,'ADX_10'] = Wilder(ADX_data['DX_10'], 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Plotting\n",
    "start = dt.datetime.strptime('2020-01-02', '%Y-%m-%d')\n",
    "end = dt.datetime.strptime('2020-12-31', '%Y-%m-%d')\n",
    "sns.set()\n",
    "\n",
    "fig = plt.figure(facecolor = 'white', figsize = (20,10))\n",
    "\n",
    "ax0 = plt.subplot2grid((6,4), (1,0), rowspan=4, colspan=4)\n",
    "ax0.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['Close']])\n",
    "ax0.set_facecolor('ghostwhite')\n",
    "ax0.legend(['Close','ADX_5','ADX_15'],ncol=3, loc = 'upper left', fontsize = 15)\n",
    "plt.title(\"Apple Stock Price, Slow and Fast Moving Average\", fontsize = 20)\n",
    "\n",
    "ax1 = plt.subplot2grid((6,4), (5,0), rowspan=1, colspan=4, sharex = ax0)\n",
    "ax1.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['ADX_5']], color = 'purple')\n",
    "ax1.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['ADX_15']], color = 'GREEN')\n",
    "ax1.legend(['ADX_5'],ncol=3, loc = 'upper left', fontsize = 12)\n",
    "ax1.set_facecolor('silver')\n",
    "\n",
    "\n",
    "plt.subplots_adjust(left=.09, bottom=.09, right=1, top=.95, wspace=.20, hspace=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Stochastic oscillator for overbought/ oversold\n",
    "\n",
    "all_data['Lowest_5D'] = all_data.groupby('symbol')['Low'].transform(lambda x: x.rolling(window = 5).min())\n",
    "all_data['High_5D'] = all_data.groupby('symbol')['High'].transform(lambda x: x.rolling(window = 5).max())\n",
    "all_data['Lowest_10D'] = all_data.groupby('symbol')['Low'].transform(lambda x: x.rolling(window = 10).min())\n",
    "all_data['High_10D'] = all_data.groupby('symbol')['High'].transform(lambda x: x.rolling(window = 10).max())\n",
    "all_data['Lowest_15D'] = all_data.groupby('symbol')['Low'].transform(lambda x: x.rolling(window = 15).min())\n",
    "all_data['High_15D'] = all_data.groupby('symbol')['High'].transform(lambda x: x.rolling(window = 15).max())\n",
    "all_data['Lowest_20D'] = all_data.groupby('symbol')['Low'].transform(lambda x: x.rolling(window = 20).min())\n",
    "all_data['High_20D'] = all_data.groupby('symbol')['High'].transform(lambda x: x.rolling(window = 20).max())\n",
    "\n",
    "all_data['Stochastic_5'] = ((all_data['Close'] - all_data['Lowest_5D'])/(all_data['High_5D'] - all_data['Lowest_5D']))*100\n",
    "all_data['Stochastic_10'] = ((all_data['Close'] - all_data['Lowest_10D'])/(all_data['High_10D'] - all_data['Lowest_10D']))*100\n",
    "all_data['Stochastic_15'] = ((all_data['Close'] - all_data['Lowest_15D'])/(all_data['High_15D'] - all_data['Lowest_15D']))*100\n",
    "all_data['Stochastic_20'] = ((all_data['Close'] - all_data['Lowest_20D'])/(all_data['High_20D'] - all_data['Lowest_20D']))*100\n",
    "\n",
    "all_data['Stochastic_%D_5'] = all_data['Stochastic_5'].rolling(window = 5).mean()\n",
    "all_data['Stochastic_%D_10'] = all_data['Stochastic_10'].rolling(window = 10).mean()\n",
    "all_data['Stochastic_%D_15'] = all_data['Stochastic_15'].rolling(window = 15).mean()\n",
    "all_data['Stochastic_%D_20'] = all_data['Stochastic_20'].rolling(window = 20).mean()\n",
    "\n",
    "all_data['Stochastic_Ratio'] = all_data['Stochastic_%D_5']/all_data['Stochastic_%D_15']\n",
    "all_data['Stochastic_Ratio2'] = all_data['Stochastic_%D_10']/all_data['Stochastic_%D_15']\n",
    "all_data['Stochastic_Ratio5'] = all_data['Stochastic_%D_10']/all_data['Stochastic_%D_20']\n",
    "all_data['Stochastic_Ratio6'] = all_data['Stochastic_%D_15']/all_data['Stochastic_%D_20']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RSI using stoch \n",
    "\n",
    "all_data['Diff'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.diff())\n",
    "all_data['Up'] = all_data['Diff']\n",
    "all_data.loc[(all_data['Up']<0), 'Up'] = 0\n",
    "\n",
    "all_data['Down'] = all_data['Diff']\n",
    "all_data.loc[(all_data['Down']>0), 'Down'] = 0 \n",
    "all_data['Down'] = abs(all_data['Down'])\n",
    "\n",
    "all_data['avg_5up'] = all_data.groupby('symbol')['Up'].transform(lambda x: x.rolling(window=5).mean())\n",
    "all_data['avg_5down'] = all_data.groupby('symbol')['Down'].transform(lambda x: x.rolling(window=5).mean())\n",
    "\n",
    "all_data['avg_15up'] = all_data.groupby('symbol')['Up'].transform(lambda x: x.rolling(window=15).mean())\n",
    "all_data['avg_15down'] = all_data.groupby('symbol')['Down'].transform(lambda x: x.rolling(window=15).mean())\n",
    "\n",
    "all_data['RS_5'] = all_data['avg_5up'] / all_data['avg_5down']\n",
    "all_data['RS_15'] = all_data['avg_15up'] / all_data['avg_15down']\n",
    "\n",
    "all_data['RSI_5'] = 100 - (100/(1+all_data['RS_5']))\n",
    "all_data['RSI_15'] = 100 - (100/(1+all_data['RS_15']))\n",
    "\n",
    "all_data['RSI_ratio'] = all_data['RSI_5']/all_data['RSI_15']\n",
    "all_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MACD for 26 and 12 day\n",
    "\n",
    "all_data['12Ewm'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.ewm(span=12, adjust=False).mean())\n",
    "all_data['26Ewm'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.ewm(span=26, adjust=False).mean())\n",
    "\n",
    "all_data['5Ewm'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.ewm(span=5, adjust=False).mean())\n",
    "all_data['15Ewm'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.ewm(span=15, adjust=False).mean())\n",
    "all_data['MACD'] = (all_data['12Ewm'] - all_data['26Ewm'])\n",
    "\n",
    "all_data['MACD2'] = (all_data['5Ewm'] - all_data['15Ewm'])\n",
    "all_data.tail(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bollinger for volatility and overbought/oversold\n",
    "all_data['15MA'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.rolling(window=15).mean())\n",
    "all_data['SD'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.rolling(window=15).std())\n",
    "all_data['upperband'] = all_data['15MA'] + 2*all_data['SD']\n",
    "all_data['lowerband'] = all_data['15MA'] - 2*all_data['SD']\n",
    "all_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting\n",
    "start = dt.datetime.strptime('2020-01-02', '%Y-%m-%d')\n",
    "end = dt.datetime.strptime('2020-12-31', '%Y-%m-%d')\n",
    "sns.set()\n",
    "\n",
    "fig = plt.figure(facecolor = 'white', figsize = (20,10))\n",
    "\n",
    "ax0 = plt.subplot2grid((6,4), (1,0), rowspan=4, colspan=4)\n",
    "ax0.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['Close']])\n",
    "\n",
    "ax0.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['upperband']], color = 'purple')\n",
    "ax0.plot(all_data[all_data.symbol=='AAPL'].loc[start:end,['lowerband']], color = 'GREEN')\n",
    "\n",
    "ax0.set_facecolor('ghostwhite')\n",
    "ax0.legend(['Close','upperband', 'lowerband'],ncol=3, loc = 'upper left', fontsize = 15)\n",
    "plt.title(\"Apple Stock Price, Bollinger Bands\", fontsize = 20)\n",
    "\n",
    "plt.subplots_adjust(left=.09, bottom=.09, right=1, top=.95, wspace=.20, hspace=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['RC'] = all_data.groupby('symbol')['Close'].transform(lambda x: x.pct_change(periods = 15)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# forecast_out = int(math.ceil(0.00192*len(all_data)))\n",
    "\n",
    "# all_data['rsi_shift'] = all_data['RSI_5'].shift(15)\n",
    "# all_data['rsi_shift2'] = all_data['RSI_5'].shift(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "# all_data['Difference200'] = all_data['levels'] - all_data['Adj Close']\n",
    "# all_data['Difference201'] = all_data['levels'] - all_data['label14']\n",
    "# all_data['Difference202'] = all_data['levels'] - all_data['label10']\n",
    "# all_data['Difference203'] = all_data['levels'] - all_data['label17']\n",
    "# all_data['Difference204'] = all_data['levels'] - all_data['label12']\n",
    "\n",
    "# all_data['RSI Diff'] = (all_data['RSI_15'] - all_data['rsi_shift2']) \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "all_data.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "all_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_dataset(df):\n",
    "    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n",
    "    df.dropna(inplace=True)\n",
    "    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n",
    "    return df[indices_to_keep].astype(np.float64)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Initial imports.\n",
    "import pandas as pd\n",
    "from path import Path\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
    "\n",
    "out = [sub_df for _, sub_df in all_data.groupby('symbol')]\n",
    "j = 0\n",
    "dict = []\n",
    "while (j < len(out)):\n",
    "    all_data = out[j]\n",
    "    \n",
    "    forecast_out = 13\n",
    "    forecast_out2 = 15\n",
    "    forecast_col = 'Adj Close'\n",
    "    vforecast_col = 'Volume'\n",
    "    \n",
    "    all_data['Date1'] = pd.to_datetime(all_data.index)\n",
    "    all_data['Date1'] = all_data['Date1'].apply(mpl_dates.date2num)\n",
    "    all_data\n",
    "    levels = []\n",
    "    for i in range(0,all_data.shape[0]):\n",
    "      if isSupport(all_data,i):\n",
    "        levels.append((all_data['Date1'][i],all_data['Low'][i]))\n",
    "      elif isResistance(all_data,i):\n",
    "        levels.append((all_data['Date1'][i],all_data['High'][i]))\n",
    "      else:\n",
    "        levels.append((all_data['Date1'][i],0))\n",
    "\n",
    "    df = pd.DataFrame(levels, columns=['Date1', 'levels'])\n",
    "    all_data = pd.merge(all_data, df, on=[\"Date1\"], right_index=True, how= 'outer')\n",
    "    all_data.tail(50)\n",
    "    all_data['levels']=all_data['levels'].replace(to_replace=0, method='ffill')\n",
    "    df.levels.fillna(method='ffill',inplace=True) \n",
    "    \n",
    "    \n",
    "    all_data['label'] = all_data[forecast_col].shift(-forecast_out)\n",
    "    all_data['second'] = all_data[forecast_col].shift(-forecast_out2)\n",
    "\n",
    "    all_data['label1'] = all_data[forecast_col].shift(2)\n",
    "    all_data['label2'] = all_data[forecast_col].shift(3)\n",
    "    all_data['label3'] = all_data[forecast_col].shift(4)\n",
    "    all_data['label4'] = all_data[forecast_col].shift(5)\n",
    "    all_data['label5'] = all_data[forecast_col].shift(6)\n",
    "    all_data['label6'] = all_data[forecast_col].shift(7)\n",
    "    all_data['label7'] = all_data[forecast_col].shift(8)\n",
    "    all_data['label8'] = all_data[forecast_col].shift(9)\n",
    "    all_data['label9'] = all_data[forecast_col].shift(10)\n",
    "    all_data['label10'] = all_data[forecast_col].shift(11)\n",
    "    all_data['label11'] = all_data[forecast_col].shift(12)\n",
    "    all_data['label12'] = all_data[forecast_col].shift(13)\n",
    "    all_data['label13'] = all_data[forecast_col].shift(14)\n",
    "    all_data['label14'] = all_data[forecast_col].shift(15)\n",
    "    all_data['label15'] = all_data[forecast_col].shift(16)\n",
    "    all_data['label16'] = all_data[forecast_col].shift(17)\n",
    "    all_data['label17'] = all_data[forecast_col].shift(18)\n",
    "    all_data['label18'] = all_data[forecast_col].shift(19)\n",
    "    all_data['label19'] = all_data[forecast_col].shift(20)\n",
    "\n",
    "    all_data['vlabel10'] = all_data[vforecast_col].shift(11)\n",
    "    all_data['vlabel14'] = all_data[vforecast_col].shift(15)\n",
    "\n",
    "    all_data['Difference'] = all_data['label'] - all_data['Adj Close']\n",
    "    all_data['second_Difference'] = all_data['second'] - all_data['Adj Close']\n",
    "    # all_data['Difference1'] = all_data['label1'] - all_data['Adj Close']\n",
    "    # all_data['Difference2'] = all_data['label2'] - all_data['Adj Close']\n",
    "    # all_data['Difference3'] = all_data['label3'] - all_data['Adj Close']\n",
    "    # all_data['Difference4'] = all_data['label4'] - all_data['Adj Close']\n",
    "    all_data['Difference6'] = all_data['label6'] - all_data['Adj Close']\n",
    "    all_data['Difference7'] = all_data['label7'] - all_data['Adj Close']\n",
    "    all_data['Difference8'] = all_data['label8'] - all_data['Adj Close']\n",
    "    all_data['Difference9'] = all_data['label9'] - all_data['Adj Close']\n",
    "    all_data['Difference10'] = all_data['label10'] - all_data['Adj Close']\n",
    "    all_data['Difference11'] = all_data['label11'] - all_data['Adj Close']\n",
    "    all_data['Difference12'] = all_data['label12'] - all_data['Adj Close']\n",
    "    all_data['Difference13'] = all_data['label13'] - all_data['Adj Close']\n",
    "    all_data['Difference14'] = all_data['label14'] - all_data['Adj Close']\n",
    "    all_data['Difference15'] = all_data['label15'] - all_data['Adj Close']\n",
    "    all_data['Difference16'] = all_data['label16'] - all_data['Adj Close']\n",
    "    all_data['Difference17'] = all_data['label17'] - all_data['Adj Close']\n",
    "    all_data['Difference18'] = all_data['label18'] - all_data['Adj Close']\n",
    "    all_data['Difference19'] = all_data['label19'] - all_data['Adj Close']\n",
    "    all_data['Difference200'] = all_data['levels'] - all_data['Adj Close']\n",
    "    \n",
    "    the_symbol = all_data['symbol'][0]\n",
    "\n",
    "    # Buy or sell column tells if the price is up or down in next 15 days\n",
    "    all_data['Buy or Sell'] = (all_data['Difference'] > (0.0014 * all_data['Adj Close'])).astype(int)\n",
    "    all_data['Buy or Sell2'] = (all_data['second_Difference'] > (0.0014 * all_data['Adj Close'])).astype(int)\n",
    "\n",
    "    all_data.drop(columns=['High','Diff','+DM','-DM', 'prev_close', 'prev_high', 'prev_low','return','Low',\n",
    "                           'Down','RSI_5','Open','Close','symbol','Difference','label','second','second_Difference'], inplace=True)\n",
    "    all_data['Buy or Sell'] = np.array(all_data['Buy or Sell'], dtype=float)\n",
    "    all_data['Buy or Sell2'] = np.array(all_data['Buy or Sell2'], dtype=float) \n",
    "    all_data.drop(all_data.head(5).index,inplace=True)\n",
    "\n",
    "    df = all_data.copy()\n",
    "    \n",
    "    df.drop(df.tail(forecast_out2).index,inplace=True)\n",
    "    clean_dataset(df)\n",
    "    clean_dataset(all_data)\n",
    "    all_data = all_data.dropna()\n",
    "    df = df.dropna()\n",
    "    df= df[df.applymap(np.isreal).any(1)]\n",
    "\n",
    "    df = df[np.isfinite(df).all(1)]\n",
    "    all_data=all_data[np.isfinite(all_data).all(1)]\n",
    "    \n",
    "    # Machine learning splitting/ training \n",
    "    y= df['Buy or Sell']\n",
    "    y1= df['Buy or Sell2']\n",
    "\n",
    "    X = df.drop(columns=['Buy or Sell', 'Buy or Sell2'])\n",
    "    X_other = all_data.drop(columns=['Buy or Sell', 'Buy or Sell2'])\n",
    "\n",
    "    # Splitting into Train and Test sets.\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=78)\n",
    "    X_train2, X_test2, y_train2, y_test2 = train_test_split(X, y1, random_state=78)\n",
    "\n",
    "    # Creating a StandardScaler instance.\n",
    "    scaler = StandardScaler()\n",
    "    # Fitting the Standard Scaler with the training data.\n",
    "    X_scaler = scaler.fit(X_train)\n",
    "    scaler2 = scaler.fit(X_other)\n",
    "    X_scaler2 = scaler.fit(X_train2)\n",
    "\n",
    "    # Scaling the data.\n",
    "    X_train_scaled = X_scaler.transform(X_train)\n",
    "    X_test_scaled = X_scaler.transform(X_test)\n",
    "    X_train_scaled2 = X_scaler2.transform(X_train2)\n",
    "    X_test_scaled2 = X_scaler2.transform(X_test2)\n",
    "    X_scaled = scaler2.transform(X_other)\n",
    "\n",
    "    # Create a random forest classifier.\n",
    "    rf_model = RandomForestClassifier(n_estimators=1000, random_state=78) \n",
    "    # Fitting the model\n",
    "    rf_model = rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "    rf_model2 = RandomForestClassifier(n_estimators=1000, random_state=78) \n",
    "    rf_model2 = rf_model2.fit(X_train_scaled2, y_train2)\n",
    "\n",
    "    # Making predictions using the testing data.\n",
    "    predictions = rf_model.predict(X_test_scaled)\n",
    "\n",
    "    predictions2 = rf_model.predict(X_test_scaled2)\n",
    "\n",
    "    pred2=rf_model.predict(X_scaled)\n",
    "    pred3 = rf_model2.predict(X_scaled)\n",
    "\n",
    "    # # Calculating the confusion matrix.\n",
    "    # cm = confusion_matrix(y_test, predictions)\n",
    "\n",
    "    # # Create a DataFrame from the confusion matrix.\n",
    "    # cm_df = pd.DataFrame(\n",
    "    #     cm, index=[\"Actual 1\",\"Actual 2\", \"Actual -1\"], columns=[\"Predicted 1\",\"Predicted 2\", \"Predicted -1\"])\n",
    "\n",
    "    # cm_df\n",
    "\n",
    "\n",
    "    # Calculating the confusion matrix.\n",
    "    cm = confusion_matrix(y_test, predictions)\n",
    "\n",
    "    # Create a DataFrame from the confusion matrix.\n",
    "    cm_df = pd.DataFrame(\n",
    "        cm, index=[\"Actual 0\", \"Actual 1\"], columns=[\"Predicted 0\", \"Predicted 1\"])\n",
    "\n",
    "    cm_df\n",
    "\n",
    "    # # Calculating the confusion matrix.\n",
    "    # cm2 = confusion_matrix(y_test2, predictions2)\n",
    "\n",
    "    # # Create a DataFrame from the confusion matrix.\n",
    "    # cm_df2 = pd.DataFrame(\n",
    "    #     cm2, index=[\"Actual 1\",\"Actual 2\", \"Actual -1\"], columns=[\"Predicted 1\",\"Predicted 2\", \"Predicted -1\"])\n",
    "\n",
    "    # cm_df2\n",
    "\n",
    "    # Calculating the confusion matrix.\n",
    "    cm2 = confusion_matrix(y_test2, predictions2)\n",
    "\n",
    "    # Create a DataFrame from the confusion matrix.\n",
    "    cm_df2 = pd.DataFrame(\n",
    "        cm2, index=[\"Actual 0\", \"Actual 1\"], columns=[\"Predicted 0\", \"Predicted 1\"])\n",
    "\n",
    "    cm_df2\n",
    "\n",
    "    # Calculating the accuracy score.\n",
    "    acc_score = accuracy_score(y_test, predictions)\n",
    "    # Displaying results\n",
    "    print(\"Confusion Matrix\")\n",
    "    display(cm_df)\n",
    "    print(f\"Accuracy Score : {acc_score}\")\n",
    "    print(\"Classification Report\")\n",
    "    print(classification_report(y_test, predictions))\n",
    "\n",
    "    # Calculating the accuracy score.\n",
    "    acc_score2 = accuracy_score(y_test2, predictions2)\n",
    "    # Displaying results\n",
    "    print(\"Confusion Matrix\")\n",
    "    display(cm_df2)\n",
    "    print(f\"Accuracy Score : {acc_score2}\")\n",
    "    print(\"Classification Report\")\n",
    "    print(classification_report(y_test2, predictions2))\n",
    "    \n",
    "    new= pd.DataFrame({\"Date\": X_other.index,\"prediction 1\": pred2})\n",
    "    new2= pd.DataFrame({\"Date\": X_other.index,\"prediction 2\": pred3})\n",
    "    mid=pd.merge(all_data, new, how='outer', on='Date')\n",
    "\n",
    "    fuller=pd.merge(mid, new2, how='outer', on='Date')\n",
    "    fuller['Results'] = fuller.apply(lambda x : 'yush!' if ((x['Buy or Sell'] == x['prediction 1'])) else 'nope', axis=1)\n",
    "    fuller['Results 2'] = fuller.apply(lambda x : 'yush!' if ((x['Buy or Sell2'] == x['prediction 2'])) else 'nope', axis=1)\n",
    "\n",
    "    forecast_out3 = forecast_out-1\n",
    "    forecast_col = 'Adj Close'\n",
    "    fuller['Tomorrow Higher Than'] = fuller[forecast_col].shift(forecast_out3)\n",
    "    fuller['Supposed to have bought'] = fuller['Buy or Sell'].shift(forecast_out3)\n",
    "    fuller['Based on prediction'] = fuller['prediction 1'].shift(forecast_out3)\n",
    "    fuller.sort_values('Date').tail(60)\n",
    "\n",
    "    forecast_out4 = forecast_out2-1\n",
    "    fuller['Tomorrow Higher Than 2'] = fuller[forecast_col].shift(forecast_out4)\n",
    "    fuller['Supposed to have bought 2'] = fuller['Buy or Sell2'].shift(forecast_out4)\n",
    "    fuller['Based on prediction 2'] = fuller['prediction 2'].shift(forecast_out4)\n",
    "    fuller.sort_values('Date').tail(60)    \n",
    "\n",
    "    excel = fuller.tail(60)\n",
    "    excel = excel[['Date','Volume','Adj Close','SMA_5','SMA_15','Buy or Sell','Buy or Sell2', 'prediction 1', 'Results','Tomorrow Higher Than', 'Supposed to have bought', 'Based on prediction','prediction 2', 'Results 2','Tomorrow Higher Than 2', 'Supposed to have bought 2', 'Based on prediction 2']]   \n",
    "\n",
    "    from openpyxl import load_workbook\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    path= r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\today.xlsx'\n",
    "    wb = load_workbook(path)\n",
    "    sheet_names = wb.get_sheet_names()\n",
    "    name = sheet_names[0]\n",
    "    sheet_ranges = wb[name]\n",
    "    df = pd.DataFrame(sheet_ranges.values)\n",
    "\n",
    "    df_other = df.tail(forecast_out2 + 1)\n",
    "    df_other\n",
    "    df_other.drop([17,16,15,18,9,10],axis=1,inplace=True)\n",
    "    df_other = df_other.rename(columns=df_other.iloc[0])\n",
    "    df_other.reset_index(drop=True,inplace=True)\n",
    "    # df_other = df_other.iloc[1:]\n",
    "\n",
    "    df_other.columns =['Date','Volume','Adj Close','SMA_5','SMA_15','Buy or Sell','Buy or Sell2', 'prediction 1', 'Results','Tomorrow Higher Than', 'Supposed to have bought', 'Based on prediction','prediction 2', 'Results 2','Tomorrow Higher Than 2', 'Supposed to have bought 2', 'Based on prediction 2']\n",
    "    df_other\n",
    "    excel['PT'] = excel.apply(lambda x : x['Adj Close'] if ((x['prediction 1'] == 1)) else 'nope', axis=1)\n",
    "    excel['PT2'] = excel.apply(lambda x : x['Adj Close'] if ((x['prediction 2'] == 1)) else 'nope', axis=1)\n",
    "    dict.append(the_symbol + ' ' + excel['PT'].apply(str) + ' ' + excel['PT2'].apply(str))\n",
    "    df_new = excel.append(df_other)\n",
    "    df_new.tail(60)\n",
    "    \n",
    "\n",
    "    from datetime import datetime\n",
    "    df_new.to_excel( r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\spreadsheets\\{fdate}.xlsx'.format(fdate = the_symbol + ' ' + datetime.now().strftime(\"%d-%m-%Y %H-%M-%S\")),\n",
    "                      sheet_name= 'today', index=False)\n",
    "    j = j + 1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # #Buy or sell column tells if the price is up or down in next 15 days\n",
    "# conditions = [\n",
    "#     ((all_data['Difference'] >= 0) & (all_data['Difference'] <= 2)),\n",
    "#     (all_data['Difference'] > 2),\n",
    "#     (all_data['Difference'] < 0)\n",
    "# ]\n",
    "# choices = [\n",
    "#     '1.0',\n",
    "#     '2.0',\n",
    "#     '-1.0'\n",
    "# ]\n",
    "# # create a new column or assign it to an existing\n",
    "# # the last param in np.select is default\n",
    "# all_data['Buy or Sell'] = np.select(conditions, choices, -4.0)\n",
    "\n",
    "# # #Buy or sell column tells if the price is up or down in next 15 days\n",
    "# conditions2 = [\n",
    "#     ((all_data['second_Difference'] >= 0) & (all_data['second_Difference'] <= 2)),\n",
    "#     (all_data['second_Difference'] > 2),\n",
    "#     (all_data['second_Difference'] < 0)\n",
    "# ]\n",
    "# choices2 = [\n",
    "#     '1.0',\n",
    "#     '2.0',\n",
    "#     '-1.0'\n",
    "# ]\n",
    "# # create a new column or assign it to an existing\n",
    "# # the last param in np.select is default\n",
    "# all_data['Buy or Sell2'] = np.select(conditions2, choices2, -4.0)\n",
    "\n",
    "\n",
    "# Buy or sell column tells if the price is up or down in next 15 days\n",
    "all_data['Buy or Sell'] = (all_data['Difference'] > (0.0014 * all_data['Adj Close'])).astype(int)\n",
    "all_data['Buy or Sell2'] = (all_data['second_Difference'] > (0.0014 * all_data['Adj Close'])).astype(int)\n",
    "\n",
    "all_data.drop(columns=['High','Diff','+DM','-DM', 'prev_close', 'prev_high', 'prev_low','return','Low',\n",
    "                       'Down','RSI_5','Open','Close','symbol','Difference','label','second','second_Difference'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data.tail(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['Buy or Sell'] = np.array(all_data['Buy or Sell'], dtype=float)\n",
    "all_data['Buy or Sell2'] = np.array(all_data['Buy or Sell2'], dtype=float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df = all_data.copy()\n",
    "df.drop(df.tail(forecast_out2).index,inplace=True)\n",
    "\n",
    "all_data.tail(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def clean_dataset(df):\n",
    "    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n",
    "    df.dropna(inplace=True)\n",
    "    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n",
    "    return df[indices_to_keep].astype(np.float64)\n",
    "clean_dataset(df)\n",
    "clean_dataset(all_data)\n",
    "all_data = all_data.dropna()\n",
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df= df[df.applymap(np.isreal).any(1)]\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "print(df.columns)\n",
    "\n",
    "df = df[np.isfinite(df).all(1)]\n",
    "all_data=all_data[np.isfinite(all_data).all(1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial imports.\n",
    "import pandas as pd\n",
    "from path import Path\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y= df['Buy or Sell']\n",
    "y1= df['Buy or Sell2']\n",
    "\n",
    "X = df.drop(columns=['Buy or Sell', 'Buy or Sell2'])\n",
    "\n",
    "\n",
    "X_other = all_data.drop(columns=['Buy or Sell', 'Buy or Sell2'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting into Train and Test sets.\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=78)\n",
    "X_train2, X_test2, y_train2, y_test2 = train_test_split(X, y1, random_state=78)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a StandardScaler instance.\n",
    "scaler = StandardScaler()\n",
    "# Fitting the Standard Scaler with the training data.\n",
    "X_scaler = scaler.fit(X_train)\n",
    "scaler2 = scaler.fit(X_other)\n",
    "X_scaler2 = scaler.fit(X_train2)\n",
    "\n",
    "# Scaling the data.\n",
    "X_train_scaled = X_scaler.transform(X_train)\n",
    "X_test_scaled = X_scaler.transform(X_test)\n",
    "X_train_scaled2 = X_scaler2.transform(X_train2)\n",
    "X_test_scaled2 = X_scaler2.transform(X_test2)\n",
    "X_scaled = scaler2.transform(X_other)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a random forest classifier.\n",
    "rf_model = RandomForestClassifier(n_estimators=1000, random_state=78) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fitting the model\n",
    "rf_model = rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "rf_model2 = RandomForestClassifier(n_estimators=1000, random_state=78) \n",
    "rf_model2 = rf_model2.fit(X_train_scaled2, y_train2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Making predictions using the testing data.\n",
    "predictions = rf_model.predict(X_test_scaled)\n",
    "\n",
    "predictions2 = rf_model.predict(X_test_scaled2)\n",
    "\n",
    "pred2=rf_model.predict(X_scaled)\n",
    "pred3 = rf_model2.predict(X_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Calculating the confusion matrix.\n",
    "# cm = confusion_matrix(y_test, predictions)\n",
    "\n",
    "# # Create a DataFrame from the confusion matrix.\n",
    "# cm_df = pd.DataFrame(\n",
    "#     cm, index=[\"Actual 1\",\"Actual 2\", \"Actual -1\"], columns=[\"Predicted 1\",\"Predicted 2\", \"Predicted -1\"])\n",
    "\n",
    "# cm_df\n",
    "\n",
    "\n",
    "# Calculating the confusion matrix.\n",
    "cm = confusion_matrix(y_test, predictions)\n",
    "\n",
    "# Create a DataFrame from the confusion matrix.\n",
    "cm_df = pd.DataFrame(\n",
    "    cm, index=[\"Actual 0\", \"Actual 1\"], columns=[\"Predicted 0\", \"Predicted 1\"])\n",
    "\n",
    "cm_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Calculating the confusion matrix.\n",
    "# cm2 = confusion_matrix(y_test2, predictions2)\n",
    "\n",
    "# # Create a DataFrame from the confusion matrix.\n",
    "# cm_df2 = pd.DataFrame(\n",
    "#     cm2, index=[\"Actual 1\",\"Actual 2\", \"Actual -1\"], columns=[\"Predicted 1\",\"Predicted 2\", \"Predicted -1\"])\n",
    "\n",
    "# cm_df2\n",
    "\n",
    "# Calculating the confusion matrix.\n",
    "cm2 = confusion_matrix(y_test2, predictions2)\n",
    "\n",
    "# Create a DataFrame from the confusion matrix.\n",
    "cm_df2 = pd.DataFrame(\n",
    "    cm2, index=[\"Actual 0\", \"Actual 1\"], columns=[\"Predicted 0\", \"Predicted 1\"])\n",
    "\n",
    "cm_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating the accuracy score.\n",
    "acc_score = accuracy_score(y_test, predictions)\n",
    "# Displaying results\n",
    "print(\"Confusion Matrix\")\n",
    "display(cm_df)\n",
    "print(f\"Accuracy Score : {acc_score}\")\n",
    "print(\"Classification Report\")\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating the accuracy score.\n",
    "acc_score2 = accuracy_score(y_test2, predictions2)\n",
    "# Displaying results\n",
    "print(\"Confusion Matrix\")\n",
    "display(cm_df2)\n",
    "print(f\"Accuracy Score : {acc_score2}\")\n",
    "print(\"Classification Report\")\n",
    "print(classification_report(y_test2, predictions2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Calculate feature importance in the Random Forest model.\n",
    "importances = rf_model.feature_importances_\n",
    "importances\n",
    "# We can sort the features by their importance.\n",
    "sorted(zip(rf_model.feature_importances_, X.columns), reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "new= pd.DataFrame({\"Date\": X_other.index,\"prediction 1\": pred2})\n",
    "new2= pd.DataFrame({\"Date\": X_other.index,\"prediction 2\": pred3})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mid=pd.merge(all_data, new, how='outer', on='Date')\n",
    "\n",
    "fuller=pd.merge(mid, new2, how='outer', on='Date')\n",
    "fuller.tail(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "fuller['Results'] = fuller.apply(lambda x : 'yush!' if ((x['Buy or Sell'] == x['prediction 1'])) else 'nope', axis=1)\n",
    "\n",
    "fuller['Results 2'] = fuller.apply(lambda x : 'yush!' if ((x['Buy or Sell2'] == x['prediction 2'])) else 'nope', axis=1)\n",
    "fuller.tail(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "forecast_out3 = forecast_out-1\n",
    "forecast_col = 'Adj Close'\n",
    "fuller['Tomorrow Higher Than'] = fuller[forecast_col].shift(forecast_out3)\n",
    "fuller['Supposed to have bought'] = fuller['Buy or Sell'].shift(forecast_out3)\n",
    "fuller['Based on prediction'] = fuller['prediction 1'].shift(forecast_out3)\n",
    "fuller.sort_values('Date').tail(60)\n",
    "\n",
    "forecast_out4 = forecast_out2-1\n",
    "fuller['Tomorrow Higher Than 2'] = fuller[forecast_col].shift(forecast_out4)\n",
    "fuller['Supposed to have bought 2'] = fuller['Buy or Sell2'].shift(forecast_out4)\n",
    "fuller['Based on prediction 2'] = fuller['prediction 2'].shift(forecast_out4)\n",
    "fuller.sort_values('Date').tail(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "excel = fuller.tail(60)\n",
    "excel = excel[['Date','Volume','Adj Close','SMA_5','SMA_15','Buy or Sell', 'prediction 1', 'Buy or Sell2','prediction 2','Results', 'Results 2','Tomorrow Higher Than','Supposed to have bought', 'Tomorrow Higher Than 2', 'Supposed to have bought 2', 'Based on prediction', 'Based on prediction 2']]\n",
    "fuller"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "excel.tail(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from openpyxl import load_workbook\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "path= r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\today.xlsx'\n",
    "wb = load_workbook(path)\n",
    "sheet_names = wb.get_sheet_names()\n",
    "name = sheet_names[0]\n",
    "sheet_ranges = wb[name]\n",
    "df = pd.DataFrame(sheet_ranges.values)\n",
    "\n",
    "df_other = df.tail(forecast_out2)\n",
    "df_other\n",
    "df_other.drop([7,8,10,9,12,11,17,16,15,18,14,13],axis=1,inplace=True)\n",
    "df_other = df_other.rename(columns=df_other.iloc[0])\n",
    "df_other.reset_index(drop=True,inplace=True)\n",
    "# df_other = df_other.iloc[1:]\n",
    "excel = excel[['Date','Volume','Adj Close','SMA_5','SMA_15','Buy or Sell','Buy or Sell2', 'prediction 1', 'Results','Tomorrow Higher Than', 'Supposed to have bought', 'Based on prediction','prediction 2', 'Results 2','Tomorrow Higher Than 2', 'Supposed to have bought 2', 'Based on prediction 2']]\n",
    "df_other\n",
    "\n",
    "df_new = excel.append(df_other)\n",
    "df_new.tail(60)\n",
    "\n",
    "from datetime import datetime\n",
    "df_new.to_excel( r'C:\\Users\\amoog\\Desktop\\ML_Stocks\\ML_Stocks_Repo\\spreadsheets\\{fdate}.xlsx'.format(fdate = tickers[0] + ' ' + datetime.now().strftime(\"%d-%m-%Y %H-%M-%S\")),\n",
    "                  sheet_name= 'today', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "tickerstickers"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
